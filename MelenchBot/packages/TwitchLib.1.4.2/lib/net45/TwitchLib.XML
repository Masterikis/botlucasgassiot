<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchLib</name>
    </assembly>
    <members>
        <member name="T:TwitchLib.Events.Client.OnBeingHostedArgs">
            <summary>Args representing an event where another channel has started hosting the broadcaster's channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.BotUsername">
            <summary>Property representing bot username that received this event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.HostedByChannel">
            <summary>Property representing the channel that has started hosting the broadcaster's channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.Viewers">
            <summary>Property representing the number of viewers in the host. If not detected, will be -1.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnBeingHostedArgs.Channel">
            <summary>Property representing the channel received state from.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChannelStateChangedArgs">
            <summary>Args representing on channel state changed event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChannelStateChangedArgs.ChannelState">
            <summary>Property representing the current channel state.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChannelStateChangedArgs.Channel">
            <summary>Property representing the channel received state from.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChatClearedArgs">
            <summary>Args representing a cleared chat event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChatClearedArgs.Channel">
            <summary>Channel that had chat cleared event.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChatColorChangedArgs">
            <summary>Args representing a successful chat color change request.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChatColorChangedArgs.Channel">
            <summary>Property reprenting the channel the event was received in.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnChatCommandReceivedArgs">
            <summary>Args representing chat command received event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnChatCommandReceivedArgs.Command">
            Property representing received command.
        </member>
        <member name="T:TwitchLib.Events.Client.OnLeftChannelArgs">
            <summary>Args representing the client left a channel event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnLeftChannelArgs.BotUsername">
            <summary>The username of the bot that left the channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnLeftChannelArgs.Channel">
            <summary>Channel that bot just left (parted).</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnConnectedArgs">
            <summary>Args representing on connected event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectedArgs.Username">
            <summary>Property representing bot username.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectedArgs.AutoJoinChannel">
            <summary>Property representing connected channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnConnectionErrorArgs">
            <summary>Args representing client connection error event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnConnectionErrorArgs.Username">
            <summary>Username of the bot that suffered connection error.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnDisconnectedArgs">
            <summary>Args representing client disconnect event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnDisconnectedArgs.Username">
            <summary>Username of the bot that was disconnected.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnExistingUsersDetectedArgs">
            <summary>Args representing existing user(s) detected event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnExistingUsersDetectedArgs.Users">
            <summary>Property representing string list of existing users.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnExistingUsersDetectedArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnHostingStartedArgs">
            <summary>Args representing hosting started event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStartedArgs.HostingChannel">
            <summary>Property representing channel that started hosting.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStartedArgs.TargetChannel">
            <summary>Property representing targeted channel, channel being hosted.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStartedArgs.Viewers">
            <summary>Property representing number of viewers in channel hosting target channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnHostingStoppedArgs">
            <summary>Args representing hosting stopped event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStoppedArgs.HostingChannel">
            <summary>Property representing hosting channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnHostingStoppedArgs.Viewers">
            <summary>Property representing number of viewers that were in hosting channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnIncorrectLoginArgs">
            <summary>Args representing an incorrect login event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnIncorrectLoginArgs.Exception">
            <summary>Property representing exception object.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnJoinedChannelArgs">
            <summary>Args representing on channel joined event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnJoinedChannelArgs.Username">
            <summary>Property representing bot username.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnJoinedChannelArgs.Channel">
            <summary>Property representing the channel that was joined.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnMessageReceivedArgs">
            <summary>Args representing message received event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnMessageReceivedArgs.ChatMessage">
            <summary>Property representing received chat message.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnMessageSentArgs">
            <summary>Args representing message sent event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnMessageSentArgs.SentMessage">
            <summary>Property representing a chat message that was just sent (check null on properties before using).</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnModeratorJoinedArgs">
            <summary>Args representing moderator joined event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorJoinedArgs.Username">
            <summary>Property representing username of joined moderator.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorJoinedArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnModeratorLeftArgs">
            <summary>Args representing moderator leave event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorLeftArgs.Username">
            <summary>Property representing username of moderator that left..</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorLeftArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnModeratorsReceivedArgs">
            <summary>Args representing a list of moderators received from chat.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorsReceivedArgs.Channel">
            <summary>Property representing the channel the moderator list came from.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnModeratorsReceivedArgs.Moderators">
            <summary>Property representing the list of moderators.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnNewSubscriberArgs">
            <summary>Args representing new subscriber event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNewSubscriberArgs.Subscriber">
            <summary>Property representing subscriber object.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNewSubscriberArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnNowHostingArgs">
            <summary>Args representing the detected hosted channel.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNowHostingArgs.Channel">
            <summary>Property the channel that received the event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnNowHostingArgs.HostedChannel">
            <summary>Property representing channel that is being hosted.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnReSubscriberArgs">
            <summary>Args representing resubscriber event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnReSubscriberArgs.ReSubscriber">
            <summary>Property representing resubscriber object.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnSendReceiveDataArgs">
            <summary>Args representing on channel state changed event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnSendReceiveDataArgs.Direction">
            <summary>Property representing the direction of the data.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnSendReceiveDataArgs.Data">
            <summary>Property representing the data that was either sent or received.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserStateChangedArgs">
            <summary>Args representing on user state changed event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserStateChangedArgs.UserState">
            <summary>Property representing user state object.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserBannedArgs">
            <summary>Args representing a user was banned event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserBannedArgs.Channel">
            <summary>Channel that had ban event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserBannedArgs.Username">
            <summary>User that was banned.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserBannedArgs.BanReason">
            <summary>Reason for ban, if it was provided.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserJoinedArgs">
            <summary>Args representing viewer joined event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserJoinedArgs.Username">
            <summary>Property representing username of joined viewer.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserJoinedArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserLeftArgs">
            <summary>Args representing viewer left event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserLeftArgs.Username">
            <summary>Property representing username of user that left.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserLeftArgs.Channel">
            <summary>Property representing channel bot is connected to.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnUserTimedoutArgs">
            <summary>Args representing a user was timed out event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.Channel">
            <summary>Channel that had timeout event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.Username">
            <summary>Viewer that was timedout.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.TimeoutDuration">
            <summary>Duration of timeout IN SECONDS.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnUserTimedoutArgs.TimeoutReason">
            <summary>Reason for timeout, if it was provided.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs">
            <summary>Args representing whisper command received event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.WhisperMessage">
            <summary>Property representing chat message object.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.Command">
            <summary>Property representing received command.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.ArgumentsAsString">
            <summary>Property representing arguements in form of string.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.ArgumentsAsList">
            <summary>Property representing arguements in form of string list.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperCommandReceivedArgs.CommandIdentifier">
            <summary>Property representing the character command identifier.</summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnWhisperReceivedArgs">
            <summary></summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperReceivedArgs.WhisperMessage">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Events.Client.OnWhisperSentArgs">
            <summary>Args representing whisper sent event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperSentArgs.Username">
            <summary>Property representing username of bot.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperSentArgs.Receiver">
            <summary>Property representing receiver of the whisper.</summary>
        </member>
        <member name="F:TwitchLib.Events.Client.OnWhisperSentArgs.Message">
            <summary>Property representing sent message contents.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnBanArgs">
            <summary>Object representing the arguments for a ban event</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBanArgs.BannedUser">
            <summary>Property representing banned user</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBanArgs.BanReason">
            <summary>Property representing ban reason.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBanArgs.BannedBy">
            <summary>Property representing the moderator who banned user.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnBitsReceivedArgs">
            <summary>Object representing the arguments for bits received event</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.Username">
            <summary>Property of for username.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.ChannelName">
            <summary>Property for channel name.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.UserId">
            <summary>Property for user id.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.ChannelId">
            <summary>Property for channel id.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.Time">
            <summary>Property for time.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.ChatMessage">
            <summary>Property for chat message</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.BitsUsed">
            <summary>Property for bits used.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.TotalBitsUsed">
            <summary>Property for total bits used.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnBitsReceivedArgs.Context">
            <summary>Property for context</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnClearArgs">
            <summary></summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnClearArgs.Moderator">
            <summary>Property representing username of moderator who cleared chat.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnEmoteOnlyArgs">
            <summary>Class representing arguments of emotes only event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnEmoteOnlyArgs.Moderator">
            <summary>Property representing moderator who issued moderator only command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnEmoteOnlyOffArgs">
            <summary>Class representing emotesonly off event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnEmoteOnlyOffArgs.Moderator">
            <summary>Property representing moderator who issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnHostArgs">
            <summary>Class representing arguments of on host event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnHostArgs.Moderator">
            <summary>Property representing moderator who issued command.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnHostArgs.HostedChannel">
            <summary>Property representing hosted channel.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnListenResponseArgs">
            <summary>Class representing arguments for a listen response.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnListenResponseArgs.Topic">
            <summary>Property representing the topic that was listened to</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnListenResponseArgs.Response">
            <summary>Property representing the response as Response object</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnListenResponseArgs.Successful">
            <summary>Property representing if request was successful.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnPubSubServiceErrorArgs">
            <summary>Class representing a pubsub service error event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnPubSubServiceErrorArgs.Exception">
            <summary>Property representing exception.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnR9kBetaArgs">
            <summary>Class representing event where r9k was enabled</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnR9kBetaArgs.Moderator">
            <summary>Property representing moderator that issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnR9kBetaOffArgs">
            <summary>Class representing event where r9k was turned off.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnR9kBetaOffArgs.Moderator">
            <summary>Property representing moderator that issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnStreamDownArgs">
            <summary>Class representing stream going down event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamDownArgs.ServerTime">
            <summary>Property representing the server time of event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamDownArgs.PlayDelay">
            <summary>Property representing the play delay.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnStreamUpArgs">
            <summary>Class representing when a stream starts event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamUpArgs.ServerTime">
            <summary>Property representing the server time.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnStreamUpArgs.PlayDelay">
            <summary>Property representing play delay.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnSubscribersOnlyArgs">
            <summary>Class representing subscriber only mode event starting.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnSubscribersOnlyArgs.Moderator">
            <summary>Property representing moderator that issued command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnSubscribersOnlyOffArgs">
            <summary>Class representing subscriber only mode turning off event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnSubscribersOnlyOffArgs.Moderator">
            <summary>Property representing the moderator that issued the command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnTimeoutArgs">
            <summary>Class representing timeout event.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimedoutUser">
            <summary>Property representing the timedout user.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimeoutDuration">
            <summary>Property representing the tumeout duration.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimeoutReason">
            <summary>Property representing the timeout reaosn.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnTimeoutArgs.TimedoutBy">
            <summary>Property representing the moderator that issued the command.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnUnbanArgs">
            <summary>OnUnban event arguments class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUnbanArgs.UnbannedUser">
            <summary>
            Name of user that was unbanned.
            </summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUnbanArgs.UnbannedBy">
            <summary>
            Name of moderator that issued unban command.
            </summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnUntimeoutArgs">
            <summary>Untimeout argument class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUntimeoutArgs.UntimeoutedUser">
            <summary>
            User that was untimed out (ie unbanned for a timeout)
            </summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnUntimeoutArgs.UntimeoutedBy">
            <summary>
            Moderator that issued the untimeout command.
            </summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnViewCountArgs">
            <summary>ViewCount arguments class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnViewCountArgs.ServerTime">
            <summary>Server time issued by Twitch.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnViewCountArgs.Viewers">
            <summary>Number of viewers at current time.</summary>
        </member>
        <member name="T:TwitchLib.Events.PubSub.OnWhisperArgs">
            <summary>[INCOMPLETE/NOT_FULLY_SUPPORTED]Whisper arguement class.</summary>
        </member>
        <member name="F:TwitchLib.Events.PubSub.OnWhisperArgs.Whisper">
            <summary>Property representing the whisper object.</summary>
        </member>
        <member name="M:TwitchLib.Events.PubSub.OnWhisperArgs.#ctor">
            <summary>
             Whisper args class constructor.
            </summary>
        </member>
        <member name="T:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs">
            <summary>Class representing event args for OnNewFollowersDetected event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.Channel">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.QueryCount">
            <summary>Event property representing number of recent followers a query to Twitch Api should return.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnNewFollowersDetectedArgs.NewFollowers">
            <summary>Event property representing all new followers detected.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs">
            <summary>Class representing event args for OnServiceStarted event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.Channel">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.QueryCount">
            <summary>Event property representing number of recent followers a query to Twitch Api should return.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStartedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs">
            <summary>Class representing event args for OnServiceStopped event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.Channel">
            <summary>Event property representing channel the service is currently monitoring.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.QueryCount">
            <summary>Event property representing number of recent followers a query to Twitch Api should return.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.FollowerService.OnServiceStoppedArgs.CheckIntervalSeconds">
            <summary>Event property representing seconds between queries to Twitch Api.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs">
            <summary>Class representing event args for OnClientThrottled.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs.ThrottleViolation">
            <summary>Event property representing reason why message was throttled.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs.Message">
            <summary>Event property representing message that failed to send due to throttling.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnClientThrottledArgs.PeriodDuration">
            <summary>Event property representing message that failed to send due to throttling.</summary>
        </member>
        <member name="T:TwitchLib.Events.Services.MessageThrottler.OnThrottlePeriodResetArgs">
            <summary>Class representing event args for OnServiceStopped event.</summary>
        </member>
        <member name="F:TwitchLib.Events.Services.MessageThrottler.OnThrottlePeriodResetArgs.TimeInPeriod">
            <summary>Event property representing number of seconds in new throttle period.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadParameterException">
            <summary>Exception representing an invalid resource</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadParameterException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.NotPartneredException">
            <summary>Exception representing a request to a partner only resource under an unpartnered account.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.NotPartneredException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.StreamOfflineException">
            <summary>Exception representing an attempt to fetch stream data on a stream that is offline.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.StreamOfflineException.#ctor">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.CompleteUpload.MissingPartsException">
            <summary>Exception thrown attempting to finish an upload without all parts.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.CompleteUpload.MissingPartsException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.InternalServerErrorException">
            <summary>Exception representing an internal server error while creating a video.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.InternalServerErrorException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.InvalidChannelException">
            <summary>Exception thrown when attempting to upload to an invalid channel.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.InvalidChannelException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.UnauthorizedException">
            <summary>Exception thrown when the passed access token doesn't have the correct scope.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.CreateVideo.UnauthorizedException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.BadPartException">
            <summary>Exception thrown when this library detects the part is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.BadPartException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.ContentLengthRequiredException">
            <summary>Exception thrown when a content-length is missing from the upload request.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.ContentLengthRequiredException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.UploadFailedException">
            <summary>Thrown when Twitch reports a failure of the upload.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.UploadVideoPart.UploadFailedException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.InvalidUploadTokenException">
            <summary>Exception thrown when the identifying video token is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.InvalidUploadTokenException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.UploadVideo.InvalidVideoIdException">
            <summary>Exception thrown when the video Id provided is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.UploadVideo.InvalidVideoIdException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadScopeException">
            <summary>Exception representing a provided scope was not permitted.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadScopeException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.InvalidCredentialException">
            <summary>Exception representing a detection that sent credentials were invalid.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.InvalidCredentialException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.API.BadResourceException">
            <summary>Exception representing an invalid resource</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.API.BadResourceException.#ctor(System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.BadListenException">
            <summary>Exception thrown when an event is subscribed to when it shouldn't be.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.BadListenException.#ctor(System.String,System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.EventNotHandled">
            <summary>Exception thrown when an event that is not handled is required to be handled.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.EventNotHandled.#ctor(System.String,System.String)">
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.InvalidParameterException">
            <summary>Exception representing bad information being provided to function/method.</summary>
        </member>
        <member name="P:TwitchLib.Exceptions.Client.InvalidParameterException.Username">
            <summary>Username that had the exception.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.InvalidParameterException.#ctor(System.String,System.String)">
            <summary>Exception construtor.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Client.ErrorLoggingInException">
            <summary>Exception representing credentials provided for logging in were bad.</summary>
        </member>
        <member name="P:TwitchLib.Exceptions.Client.ErrorLoggingInException.Username">
            <summary>Exception representing username associated with bad login.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Client.ErrorLoggingInException.#ctor(System.String,System.String)">
            <summary>Exception construtor.</summary>
        </member>
        <member name="T:TwitchLib.Exceptions.Services.BadQueryCountException">
            <summary>Exception representing an invalid cache size provided.</summary>
        </member>
        <member name="M:TwitchLib.Exceptions.Services.BadQueryCountException.#ctor(System.String)">
            <summary>Exception constructor.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Rfc2812.IsValidNickname(System.String)">
             <summary>
             Checks if the passed nickname is valid according to the RFC
            
             Use with caution, many IRC servers are not conform with this!
             </summary>
        </member>
        <member name="M:TwitchLib.Internal.WebSocketClient.Create(System.Uri)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="uri">The URI of the WebSocket server.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.WebSocketClient.Connect">
            <summary>
            Connects to the WebSocket server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.WebSocketClient.Disconnect">
            <summary>
            Connects to the WebSocket server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.WebSocketClient.Reconnect">
            <summary>
            Reconnects to the WebSocket server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.WebSocketClient.SendMessage(System.String)">
            <summary>
            Send a message to the WebSocket server.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.getReadType(System.String,System.String)">
            <summary>Function returning the type of message received from Twitch</summary>
            <param name="message"></param>
            <param name="channel"></param>
            <returns>Message type (ie NOTICE, PRIVMSG, JOIN, etc)</returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.getMsgId(System.String)">
            <summary>
            Extracts msg-id property from message.
            </summary>
            <param name="message"></param>
            <returns>Message id (ie host_on)</returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectConnected(System.String)">
            <summary>[Works] Parse function to detect connected successfully</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectNewSubscriber(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect new subscriber</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectMessageReceived(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new messages.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectCommandReceived(System.String,System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel},TwitchLib.Models.Client.MessageEmoteCollection,System.Boolean,System.Collections.Generic.List{System.Char})">
            <summary>[Works] Parse function to detect new commands.</summary>
            <param name="botUsername"></param>
            <param name="message"></param>
            <param name="channels"></param>
            <param name="_channelEmotes"></param>
            <param name="WillReplaceEmotes"></param>
            <param name="_commandIdentifiers"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectUserJoined(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new viewers.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserLeft(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect leaving viewers.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedModeratorJoined(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new moderators.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedModeatorLeft(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect leaving moderators.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedIncorrectLogin(System.String)">
            <summary>[Works] Parse function to detect failed login.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedMalformedOAuth(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect malformed oauth error.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedHostLeft(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect host leaving.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedChannelStateChanged(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new channel state.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserStateChanged(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect new user states.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedReSubscriber(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect resubscriptions.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedPing(System.String)">
            <summary>[Works] Parse function to detect PING messages.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedPong(System.String)">
            <summary>[Works] Parse function to detect PONG messages.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedHostingStopped(System.String)">
            <summary>Parse function to detect stopped hosting.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedHostingStarted(System.String)">
            <summary>[Works] Parse function to detect started hosting.</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedExistingUsers(System.String,System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>[Works] Parse function to detect existing user messages.</summary>
            <param name="message"></param>
            <param name="username"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedClearedChat(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect clearchat.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserTimedout(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect a viewer was timedout.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedUserBanned(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect viewer was banned.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedModeratorsReceived(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>Parse function to detect list of moderators was received.</summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedChatColorChanged(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>
            Parse function to detect chat color being changed successfully
            </summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedNowHosting(System.String,System.Collections.Generic.List{TwitchLib.Models.Client.JoinedChannel})">
            <summary>
            Parse function to detect now hosting event.
            </summary>
            <param name="message"></param>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Chat.detectedJoinChannelCompleted(System.String)">
            <summary>
            Parse function to detect that a 366 has been received indicating completed joining channel
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Internal.Parsing.Whisper">
            <summary>Static class used for detecting whisper commands and messages.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Whisper.detectedWhisperReceived(System.String,System.String)">
            <summary>Function used to detect if a whisper was received or not.</summary>
        </member>
        <member name="M:TwitchLib.Internal.Parsing.Whisper.detectedWhisperCommandReceived(System.String,System.String,System.Collections.Generic.List{System.Char})">
            <summary>Function used to detect if a whisper command was received or not.</summary>
        </member>
        <member name="T:TwitchLib.Internal.TwitchApi">
            <summary>Static class with functionality for Twitch API calls.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Community.Community">
            <summary>
            Object representing a Twitch community.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.Id">
            <summary>Id of retrieved community</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.AvatarImageUrl">
            <summary>Image url of the community avatar.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.CoverImageUrl">
            <summary>Url image scrolled across the top of the community page</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.Description">
            <summary>Community description</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.DescriptionHtml">
            <summary>HTML embeded community description.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.Language">
            <summary>Community official language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.Name">
            <summary>Community name</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.OwnerId">
            <summary>Twitch user id of the owner of the community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.Rules">
            <summary>Rules of the community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.RulesHtml">
            <summary>HTML embeded rules of the community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.Community.Summary">
            <summary>Community summary.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.Community.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Community constructor.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Community.CommunityModerator">
            <summary>Object representing the properties of a community moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.DisplayName">
            <summary>Customizable display name of moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.Id">
            <summary>ID of the moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.Name">
            <summary>Name of moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.Type">
            <summary>Moderator user type.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.Bio">
            <summary>Bio of the moderator, if it exists.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.CreatedAt">
            <summary>DateTime object of when the account was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.UpdatedAt">
            <summary>DateTIme object of the last update of the account.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityModerator.Logo">
            <summary>URL to user's logo.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.CommunityModerator.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for CommunityModerator object.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Community.CommunityTimedOutUsersResponse">
            <summary>Object representing a response from fetching timedout users.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityTimedOutUsersResponse.Cursor">
            <summary>String used to identify where the results came from.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityTimedOutUsersResponse.TimedOutUsers">
            <summary>List of timed out users in the community</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.CommunityTimedOutUsersResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>CommunityTimedOutUsersResponse constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Community.CommunityUser">
            <summary>
            Object representing a banned community member.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.UserId">
            <summary>Twitch assigned unique ID of users.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.DisplayName">
            <summary>Customizable display name of user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.Name">
            <summary>Name of user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.Bio">
            <summary>Bio of the user</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.AvatarImageUrl">
            <summary>Url to image of user's avatar.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.StartTimestamp">
            <summary>Start time stamp for ban (set for bans, timeouts).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityUser.EndTimestamp">
            <summary>End time stamp for a timeout (set for timeouts)</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.CommunityUser.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Models.API.Community.CommunityBannedUsersResponse">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityBannedUsersResponse.Cursor">
            <summary>String used to identify where the results came from.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.CommunityBannedUsersResponse.BannedUsers">
            <summary></summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.CommunityBannedUsersResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>CommunityBannedUsersResponse constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Community.StreamsInCommunityResponse">
            <summary>Model representing the streams in a current community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.StreamsInCommunityResponse.Total">
            <summary>Total number </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.StreamsInCommunityResponse.Streams">
            <summary>List of streams that are currently in the community.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.StreamsInCommunityResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>StreamsInCommunityResponse constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Community.TopCommunitiesResponse">
            <summary>
            Object representing a response from the TopCommunities endpoint.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunitiesResponse.Cursor">
            <summary>String used to identify offset in results.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunitiesResponse.Total">
            <summary>Total number of communities</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunitiesResponse.TopCommunities">
            <summary>List of all top communites</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.TopCommunitiesResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for TopCommunitiesResponse</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Community.TopCommunityListing">
            <summary>Object representing a single listing from top Twitch communities.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunityListing.Id">
            <summary>Id of Twitch community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunityListing.Name">
            <summary>Name of the Twitch community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunityListing.Viewers">
            <summary>Number of viewers in the community currently.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunityListing.Channels">
            <summary>Number of live channels currently in the community.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Community.TopCommunityListing.AvatarImageUrl">
            <summary>Url to the avatar image.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Community.TopCommunityListing.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for TopCommunityListing object.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.v5.User">
            <summary>Class representing a user object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.Type">
            <summary>Property representing the type of data requested</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.Name">
            <summary>Property representing the name of the user requested</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.CreatedAt">
            <summary>DateTime object representing the creation of the account.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.UpdatedAt">
            <summary>DateTime object representing the most recent update of the account.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.Logo">
            <summary>Property representing the logo of the user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.Id">
            <summary>Property representing the Id of the user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.v5.User.Bio">
            <summary>Property representing the bio of the user.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.v5.User.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>User constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Badge.Badge">
            <summary>Class representing a Badge as returned by the Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Badge.Badge.BadgeName">
            <summary>The name of the badge name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Badge.Badge.Alpha">
            <summary>The alpha version of the badge image.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Badge.Badge.Image">
            <summary>The default image of the badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Badge.Badge.SVG">
            <summary>The svg version of the badge image.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Badge.Badge.#ctor(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>Badge object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Badge.BadgeResponse">
            <summary>Class represents a response from the Chat Badge Twitch API query.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Badge.BadgeResponse.ChannelBadges">
            <summary>List of all badges available in channel.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Badge.BadgeResponse.#ctor(System.String)">
            <summary>BadgeResponse object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Block.Block">
            <summary>
            Block object representing one blocked user.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Block.Block.UpdatedAt">
            <summary>
            DateTime object representing when the block was last updated.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Block.Block.TimeSinceUpdate">
            <summary>
            TimeSpan object representing amount of time since last update.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Block.Block.User">
            <summary>
            User object of the user that has been blocked.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.API.Block.Block.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Block object constructor.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Channel.ChannelHasUserSubscribedResponse">
            <summary>Class representing a response from Twitch API for ChannelUserHasSubscribed</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.ChannelHasUserSubscribedResponse.Id">
            <summary>Property representing internal variable Id</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.ChannelHasUserSubscribedResponse.User">
            <summary>Property representing a User object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.ChannelHasUserSubscribedResponse.CreatedAt">
            <summary>Property representing the created at datetime object.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Channel.ChannelHasUserSubscribedResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for ChannelHasUserSubscribedResponse object.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Channel.Channels">
            <summary>Class representing Channels object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.DisplayName">
            <summary>Property representing the display name of a user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Game">
            <summary>Property representing the game a channel is playing.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Status">
            <summary>Property representing the status of a specific channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.FightAdBlock">
            <summary>Property representing whether or not a channel is fighting adblock.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Id">
            <summary>Property representing internal Id variable.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Name">
            <summary>Property representing the name of a channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Partner">
            <summary>Property representing the partner status of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.TwitchLiverailId">
            <summary>Property represeting Twitch's channel Liverail Id (I think related to advertisements)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.LiverailId">
            <summary>Property representing the LiverailId.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.ComscoreId">
            <summary>Property representing the comscore id (I think related to advertisements).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.ComscoreC6">
            <summary>Property representing Comscore6(?).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.SteamId">
            <summary>Property representing the Steam Id of the user (if available).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.PPV">
            <summary>Property representing the PPV status of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.BroadcasterSoftware">
            <summary>Property representing the broadcaster software (fairly unreliable).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Prerolls">
            <summary>Property representing the preroll status of the channel (preroll ads)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channels.Postrolls">
            <summary>Property representing the postrolls status of the channel (postroll ads)</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Channel.Channels.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for Channels object.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Channel.Channel">
            <summary>Class representing a channel object from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Mature">
            <summary>Property representing whether channel is mature or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Partner">
            <summary>Property representing whether channel is partnered or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Followers">
            <summary>Property representing number of followers the channel has.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Views">
            <summary>Property representing number of views channel has.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Id">
            <summary>Property representing channel Id.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Background">
            <summary>Property representing background image url.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.BroadcasterLanguage">
            <summary>Property representing the language the broadcaster has flagged their channel as.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.CreatedAt">
            <summary>Property representing date time string of channel creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.TimeSinceCreated">
            <summary>Property representing the time since the channel was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Delay">
            <summary>Property representing channel delay, if applied.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.DisplayName">
            <summary>Property representing customized display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Game">
            <summary>Property representing the game the channel is playing.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Language">
            <summary>Property representing the signed language.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Logo">
            <summary>Property representing the logo of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Name">
            <summary>Property representing the channel name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.ProfileBanner">
            <summary>Property representing the banner that stretches across the top.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.Status">
            <summary>Property representing current channel status.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.UpdatedAt">
            <summary>Property representing date time of last channel update.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Channel.Channel.TimeSinceUpdated">
            <summary>Property represneting amount of time since last channel update.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Channel.Channel.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for channel object.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Clip.Broadcaster">
            <summary>Model representing a broadcaster assigned to a Twitch Clip</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Broadcaster.Id">
            <summary>Broadcaster assigned unique ID</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Broadcaster.Name">
            <summary>Broadcaster's name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Broadcaster.DisplayName">
            <summary>Customizable iteration of broadcaster's name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Broadcaster.ChannelUrl">
            <summary>URL to Broadcaster's channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Broadcaster.Logo">
            <summary>URL of Broadcaster's logo.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Clip.Broadcaster.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor of Broadcaster model.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Clip.Curator">
            <summary>Model representing the curator of a Twitch Clip</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Curator.Id">
            <summary>Curator's Twitch assigned unique Id</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Curator.Name">
            <summary>Curator name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Curator.DisplayName">
            <summary>Customizable iteration of the curator's name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Curator.ChannelUrl">
            <summary>URL to the curator's channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Curator.Logo">
            <summary>URL of the curator's logo.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Clip.Curator.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Curator model constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Clip.VOD">
            <summary>Model representing a VOD a Twitch Clip is sourced from.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.VOD.Id">
            <summary>Unique Twitch-assigned Id</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.VOD.Url">
            <summary>URL to the VOD the Twitch Clip was sourced from.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Clip.Clip">
            <summary>Model for a Twitch Clip</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Id">
            <summary>Unique Twitch-assigned Id</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Url">
            <summary>URL to the clip.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.EmbedUrl">
            <summary>URL with the intended use of being embeded.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.EmbedHtml">
            <summary>HTML snippet needed to embed the clip.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Broadcaster">
            <summary>Broadcaster model representing data about the broadcaster in the clip.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Curator">
            <summary>Curator model representing the data about the curator of the clip.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.VOD">
            <summary>VOD model representing the VOD that the clip was sourced from.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Game">
            <summary>Name of the game that the clip features.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Title">
            <summary>Title of the clip.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Views">
            <summary>Number of total views the clip has received.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.Duration">
            <summary>Duration of the clip.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.Clip.CreatedAt">
            <summary>DateTime object representing the creation date.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Clip.Clip.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Clip model constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Clip.ClipsResponse">
            <summary>Model representing the response from Twitch regarding a Clip</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.ClipsResponse.Cursor">
            <summary>Cursor string used to index calls to Twitch.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Clip.ClipsResponse.Clips">
            <summary>List including all Clip models returned from Twitch.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Clip.ClipsResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>ClipResposne model constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Game.Box">
            <summary>Class representing game box image in various sizes.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Box.Large">
            <summary>Large box image.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Box.Medium">
            <summary>Medium box image.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Box.Small">
            <summary>Small box image.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Box.Template">
            <summary>Template box image.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Game.Box.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for BoxUrls.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Game.Logo">
            <summary>Class representing game logo image in various sizes.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Logo.Large">
            <summary>Large game logo.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Logo.Medium">
            <summary>Medium game logo.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Logo.Small">
            <summary>Small game logo.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Logo.Template">
            <summary>Template game logo.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Game.Logo.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>LogoUrls object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Game.Game">
            <summary>Class representing Game object returned from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Game.Name">
            <summary>Name of returned game.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Game.Popularity">
            <summary>Popularity of returned game [nullable]</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Game.Id">
            <summary>Twitch ID of returned game [nullable]</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Game.GiantBombId">
            <summary>GiantBomb ID of returned game [nullable]</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Game.Box">
            <summary>Box class representing Box image URLs</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.Game.Logo">
            <summary>Logo class representing Logo image URLs</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Game.Game.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for Game object.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Game.GameByPopularityListing">
            <summary>Class representing a game by popularity listing received from Twitch Api.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.GameByPopularityListing.Game">
            <summary>Property representing the Game object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.GameByPopularityListing.Viewers">
            <summary>Property representing the number of viewers the game currently has.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Game.GameByPopularityListing.Channels">
            <summary>Property representing the number of channels currently broadcasting the game.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Game.GameByPopularityListing.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for GameByPopularityListing</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Stream.Preview">
            <summary>Class representing the various sizes of previews.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Preview.Small">
            <summary>Property representing the small preview size.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Preview.Medium">
            <summary>Property representing the medium preview size.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Preview.Large">
            <summary>Property representing the large preview size.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Preview.Template">
            <summary>Property representing the template preview size.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Stream.Preview.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>PreviewObj object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Stream.FeaturedStream">
            <summary>Class representing a single featured stream from a Twitch API request.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.FeaturedStream.Text">
            <summary>Property representing a basic text description of the featured channel. (THIS HAS HTML ELEMENTS, BE AWARE)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.FeaturedStream.Sponsored">
            <summary>Property representing whether or not the featured channel is sponsored.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.FeaturedStream.Priority">
            <summary>Property representing the priority of the featured stream (scale from 1-10? looks like 5 and 10 are only in use)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.FeaturedStream.Scheduled">
            <summary>Property representing whether or not a stream is a scheduled feature.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.FeaturedStream.Image">
            <summary>Property representing the image shown in the tite on the home page.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.FeaturedStream.Stream">
            <summary>Property representing the stream object housing all stream details.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Stream.FeaturedStream.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>FeaturedStream constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Stream.StreamsSummary">
            <summary>Class representing the response from Twtich regarding streams summary.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.StreamsSummary.TotalViewers">
            <summary>Total number of viewers across all streams on Twitch.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.StreamsSummary.TotalStreams">
            <summary>Total number of streams across all of Twitch.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Stream.StreamsSummary.#ctor(System.String)">
            <summary>StreamSummary constructor.</summary>
            <param name="jsonStr"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Stream.Stream">
            <summary>Class representing a stream as returned by Twitch API</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.IsPlaylist">
            <summary>Property representing whether or not the stream is playlist or live.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.AverageFps">
            <summary>Property representing average frames per second.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.Delay">
            <summary>Property representing any delay on the stream (in seconds)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.VideoHeight">
            <summary>Property representing height dimension.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.Viewers">
            <summary>Property representing number of current viewers.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.Id">
            <summary>Property representing the stream id.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.Preview">
            <summary>Property representing the preview images in an object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.CreatedAt">
            <summary>Property representing the date time the stream was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.TimeSinceCreated">
            <summary>Property representing the time since the stream was created (essentially uptime)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.Game">
            <summary>Property representing the current game.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Stream.Stream.Channel">
            <summary>Property representing the channel the stream is from.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Stream.Stream.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Stream object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Subscriber.SubscribersResponse">
            <summary>Class representing response from Twitch API for channel Subscribers.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Subscriber.SubscribersResponse.Subscribers">
            <summary>Property representing list of Subscriber objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Subscriber.SubscribersResponse.TotalSubscriberCount">
            <summary>Property representing total subscriber count.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Subscriber.SubscribersResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>SubscribersResponse constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="M:TwitchLib.Models.API.Subscriber.SubscribersResponse.#ctor(System.Collections.Generic.List{TwitchLib.Models.API.Subscriber.Subscription},System.Int32)">
            <summary>
            SubscribersResponse constructor (with subs and total subs as params)
            </summary>
            <param name="subscribers"></param>
            <param name="totalSubs"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Subscriber.Subscription">
            <summary>Class representing a channel subscription as fetched via Twitch API</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Subscriber.Subscription.CreatedAt">
            <summary>DateTime object representing when a subscription was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Subscriber.Subscription.TimeSinceCreated">
            <summary>TimeSpan object representing the amount of time since the subscription was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Subscriber.Subscription.User">
            <summary>User details returned along with the request.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Subscriber.Subscription.#ctor(System.String)">
            <summary>Constructor for Subscription</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Subscriber.Subscription.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for Subscription (using JToken as param)</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Feed.FeedResponse">
            <summary>Class representing the response from fetching a channel feed via Twitch API</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.FeedResponse.Total">
            <summary>Property representing total posts in a channel's feed.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.FeedResponse.Cursor">
            <summary>Property representing cursor value used for pagination.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.FeedResponse.Topic">
            <summary>Property representing the topic (likely internal).</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.FeedResponse.Posts">
            <summary>Property representing a list of Post objects.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Feed.FeedResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>FeedResponse object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Feed.Post">
            <summary>Class representing Post object found in FeedResponse</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Id">
            <summary>Property representing Id of post.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.CreatedAt">
            <summary>Property representing date time string of post creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.TimeSinceCreated">
            <summary>Property representing the amount of time since the post was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Deleted">
            <summary>Property representing whether or not post was deleted.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Body">
            <summary>Property representing the body of the post.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Emotes">
            <summary>Property representing list of Emote objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Reactions">
            <summary>Property representing list of reaction objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.User">
            <summary>Property representing User object.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.CommentsTotal">
            <summary>Property representing total number of comments.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.CommentsCursor">
            <summary>Proeprty representing comments cursor used for pagination.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comments">
            <summary>Property representing list of Comment objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Permissions">
            <summary>Property representing the list of permissions of the post fetch.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Feed.Post.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Post object constructor</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Feed.Post.Emote">
            <summary>Class representing an emote found in a comment or post.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Emote.Id">
            <summary>Property representing Id of emote.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Emote.Start">
            <summary>Property representing start index of emote.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Emote.End">
            <summary>Property representing end index of emote.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Emote.Set">
            <summary>Property representing the emote set id.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Feed.Post.Emote.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Emote object construcotr.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Feed.Post.Reaction">
            <summary>Class representing a reaction as towards a post.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Reaction.Emote">
            <summary>Property representing the emote of the reaciton.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Reaction.Count">
            <summary>Property representing the number of people using reaction.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Feed.Post.Reaction.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Reaction object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Feed.Post.Comment">
            <summary>Class representing comments found on a post.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.Id">
            <summary>Property representing the Id of the comment.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.CreatedAt">
            <summary>Property representing the date time of the comment creation.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.TimeSinceCreated">
            <summary>Property representing the amount of time since comment was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.Deleted">
            <summary>Property representing whether or not the comment was deleted.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.Body">
            <summary>Property representing the body of the comment.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.Permissions">
            <summary>Property representing the list of permissions assigned to comment fetch.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.Emotes">
            <summary>Property representing the list of Emote objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.Reactions">
            <summary>Property representing the list of Reaction objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.Post.Comment.User">
            <summary>Property representing the commenter.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Feed.Post.Comment.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Comment object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Feed.PostToChannelFeedResponse">
            <summary>
            Class representing a response from Twitch from posting to channel feed.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.PostToChannelFeedResponse.TweetUrl">
            <summary>
            String containing the tweet url generated if selected.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Feed.PostToChannelFeedResponse.Post">
            <summary>
            Post object representing all details of the post sent to Twitch.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.API.Feed.PostToChannelFeedResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            PostToChannelFeedResponse constructor.
            </summary>
            <param name="jsonData"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Team.ImageSizes">
            <summary>Class representing the various sizes of images.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.ImageSizes.Size28">
            <summary>Property representing the 28 size url.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.ImageSizes.Size50">
            <summary>Property representing the 50 size url.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.ImageSizes.Size70">
            <summary>Property representing the 70 size url.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.ImageSizes.Size150">
            <summary>Property representing the 150 size url.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.ImageSizes.Size300">
            <summary>Property representing the 300 size url.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.ImageSizes.Size600">
            <summary>Property representing the 600 size url.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Team.ImageSizes.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>ImgSizes object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Team.TeamMember">
            <summary>Class representing a team member as returned by Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.IsLive">
            <summary>Property representing whether streamer is live.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.ImageSizes">
            <summary>Property representing the various image sizes.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.CurrentViews">
            <summary>Property representing the current viewer count.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.FollowerCount">
            <summary>Property representing the current follower count.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.TotalViews">
            <summary>Property representing the total view count.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.Description">
            <summary>Property representing the channel description.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.DisplayName">
            <summary>Property representing the streamer customized display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.Link">
            <summary>Property representing the link to the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.MetaGame">
            <summary>Property representing the meta game of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.Name">
            <summary>Property representing the name of the channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Team.TeamMember.Title">
            <summary>Property representing the title of the channel.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Team.TeamMember.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>TeamMember constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.User.User">
            <summary>Class representing a User object returned from Twitch API.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.DisplayName">
            <summary>Display name of user (CAN BE NULL, USE NAME)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.Id">
            <summary>Twitch Id of user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.Name">
            <summary>Username of user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.Type">
            <summary>Type of user assigned by Twitch.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.Bio">
            <summary>Bio of user.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.CreatedAt">
            <summary>Date and time user was created at.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.TimeSinceCreated">
            <summary>TimeSpan object that represents time since the user was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.UpdatedAt">
            <summary>Date and time user was last updated (logged in generally)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.TimeSinceUpdated">
            <summary>TimeSpan object representing the amount of time since the User was last updated.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.User.User.Logo">
            <summary>Link to logo of user.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.User.User.#ctor(System.String)">
            <summary>Constructor for User object.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Video.Channel">
            <summary>Class representing channel data.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Channel.Id">
            <summary>If an Id exists, it will be placed in this property.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Channel.Name">
            <summary>Property representing Name of channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Channel.DisplayName">
            <summary>Property representing DisplayName of channel.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.Channel.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Channel data construcotr.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Video.FPS">
            <summary>Class representing FPS data.</summary>
        </member>
        <member name="F:TwitchLib.Models.API.Video.FPS.UsingIntegerQualities">
            <summary>FPS can return data either in "high", or in "1080p". IF this boolean is set, it means that the integer values (1080p, 144p, etc) properties are being used.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.p1080">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.p144">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.p240">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.p360">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.p480">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.p720">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.Chunked">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.High">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.Low">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.Medium">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.FPS.Mobile">
            <summary></summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.FPS.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            FPS data constructor
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.Resolutions">
            <summary>Class representing resolution data.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Resolutions.p1080">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Resolutions.p144">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Resolutions.p240">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Resolutions.p360">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Resolutions.p480">
            <summary></summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Resolutions.p720">
            <summary></summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.Resolutions.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Resolutions data constructor
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.UploadVideo.CreateVideoResponse">
            <summary>Model representing the response from Twitch after making request to create video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.UploadVideo.CreateVideoResponse.Upload">
            <summary>Upload details including URL of the upload and the token.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.UploadVideo.CreateVideoResponse.Video">
            <summary>All details regarding the created video.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.UploadVideo.CreateVideoResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>CreateVideoResponse constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.UploadVideo.Upload">
            <summary>Model containing data related to the upload of a video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.UploadVideo.Upload.URL">
            <summary>URL of the uploaded video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.UploadVideo.Upload.Token">
            <summary>Unique Twitch assigned token of uploaded video.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.UploadVideo.Upload.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Upload constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.Preview">
            <summary>Model representing the links to various preview images.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Preview.Small">
            <summary>Small preview image URL.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Preview.Medium">
            <summary>Medium preview image URL.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Preview.Large">
            <summary>Large preview image URL.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Preview.Template">
            <summary>Template preview image URL.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.Preview.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Preview  constructor.</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.Thumbnails">
            <summary>Model representing the various thumbnail URLs.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Thumbnails.Small">
            <summary>List of small thumbnails</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Thumbnails.Medium">
            <summary>List of medium thumbnails</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Thumbnails.Large">
            <summary>List of large thumbnails</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Thumbnails.Template">
            <summary>List of template thumbnails</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.Thumbnails.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for Thumbnails</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.Thumbnails.Thumbnail">
            <summary>Model representing details about a single Thumbnail</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Thumbnails.Thumbnail.Type">
            <summary>The type of the Thumbnail</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Thumbnails.Thumbnail.URL">
            <summary>The URL to the Thumbnail</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.Thumbnails.Thumbnail.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Constructor for Thumbnail</summary>
            <param name="json"></param>
        </member>
        <member name="T:TwitchLib.Models.API.Video.Video">
            <summary>
            Class representing returned Video object.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Channel">
            <summary>Object representing all channel data returned by this request.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Fps">
            <summary>Object representing the available FPSs of versions of the video (-1 representings property doesnt exist)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Language">
            <summary>Language code associated with video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Length">
            <summary>Length of video in seconds.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Views">
            <summary>Number of recorded views.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Resolutions">
            <summary>All available resolutions of video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.BroadcastId">
            <summary>Unique identifier assigned to broadcast video originated from.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.BroadcastType">
            <summary>Represents teh type of broadcast (could be custom upload)</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Description">
            <summary>Creator's description of video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.DescriptionHtml">
            <summary>Similar to Description property, but with HTML elements.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Game">
            <summary>Game being played in the video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Id">
            <summary>Id of the particular video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Preview">
            <summary>Video preview image link.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.CreatedAt">
            <summary>Date and time string representing recorded date.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.TimeSinceCreated">
            <summary>TimeSpan object representing the time since the video was recorded.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.PublishedAt">
            <summary>DateTime object representing the period at which the video was published.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Status">
            <summary>Current status of the recorded video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.TagList">
            <summary>Tags assigned to video either automatically or by content creator.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Title">
            <summary>Title of video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Url">
            <summary>Twitch URL to video.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.Viewable">
            <summary>Current view status.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Video.Video.ViewableAt">
            <summary>View location.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Video.Video.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Video constructor
            </summary>
            <param name="apiResponse">API response string from Twitch call.</param>
        </member>
        <member name="T:TwitchLib.Models.API.Chat.Chatter">
            <summary>Class representing a chatter as returned by the Twitch Api.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Chat.Chatter.Username">
            <summary>Property representing the username of a chatter.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Chat.Chatter.UserType">
            <summary>Property representing the user type of a chatter.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Chat.Chatter.#ctor(System.String,TwitchLib.Enums.UserType)">
            <summary>Constructor of Chatter.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Follow.Follow">
            <summary>Object representing a follow between a user/viewer and a channel/streamer.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follow.IsFollowing">
            <summary>Bool representing if user follows channel. If false, all other properties are null.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follow.CreatedAt">
            <summary>DateTime object representing when a follow was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follow.TimeSinceCreated">
            <summary>TimeSpan object representing the amount of time since the follow was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follow.Notifications">
            <summary>Bool representing whether or not the user receives notificaitons for their follow.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follow.Channel">
            <summary>Channel details returned along with the request.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Follow.Follow.#ctor(System.String,System.Boolean)">
            <summary>Constructor for follow</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Follow.FollowedUsersResponse">
            <summary>Represents API response from user's followed list.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.FollowedUsersResponse.Follows">
            <summary>All follows returned in the api request.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.FollowedUsersResponse.TotalFollowCount">
            <summary>Total follow count.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Follow.FollowedUsersResponse.#ctor(System.String)">
            <summary>FollowedUsersResponse constructor</summary>
            <param name="apiResponse">Returned api response in string form.</param>
        </member>
        <member name="T:TwitchLib.Models.API.Follow.Follower">
            <summary>Class representing a follower as fetched via Twitch API</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follower.Notifications">
            <summary>Property representing whether notifications are enabled or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follower.CreatedAt">
            <summary>Property representing date time of follow.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follower.TimeSinceCreated">
            <summary>Property representing the amount of time since the follow was created.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.Follower.User">
            <summary>Property representing the follower user.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Follow.Follower.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>Follower object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.API.Follow.FollowersResponse">
            <summary>Class representing response from Twitch API for followers.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.FollowersResponse.Followers">
            <summary>Property representing list of Follower objects.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.FollowersResponse.TotalFollowerCount">
            <summary>Property representing total follower count.</summary>
        </member>
        <member name="P:TwitchLib.Models.API.Follow.FollowersResponse.Cursor">
            <summary>Property representing cursor for pagination.</summary>
        </member>
        <member name="M:TwitchLib.Models.API.Follow.FollowersResponse.#ctor(System.String)">
            <summary>FollowersResponse object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ChannelState">
            <summary>Class representing a channel state as received from Twitch chat.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.R9K">
            <summary>Property representing whether R9K is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.SubOnly">
            <summary>Property representing whether Sub Mode is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.SlowMode">
            <summary>Property representing whether Slow mode is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.EmoteOnly">
            <summary>Property representing whether EmoteOnly mode is being applied to chat or not. WILL BE NULL IF VALUE NOT PRESENT.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.BroadcasterLanguage">
            <summary>Property representing the current broadcaster language.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.Channel">
            <summary>Property representing the current channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChannelState.FollowersOnly">
            <summary>Property </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ChannelState.#ctor(System.String)">
            <summary>ChannelState object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ChatCommand">
            <summary>
            Object representing a command received via Twitch chat.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.ChatMessage">
            <summary>Property representing the chat message that the command came in.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.Command">
            <summary>Property representing the actual command (without the command prefix).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.ArgumentsAsList">
            <summary>Property representing all arguments received in a List form.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.ArgumentsAsString">
            <summary>Property representing all arguments received in a string form.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatCommand.CommandIdentifier">
            <summary>Property representing the command identifier (ie command prefix).</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ChatCommand.#ctor(System.String,TwitchLib.Models.Client.ChatMessage)">
            <summary>
            ChatCommand constructor.
            </summary>
            <param name="ircString"></param>
            <param name="chatMessage"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.EmoteSet">
            <summary>
            Object representing emote set from a chat message.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emotes">
            <summary>
            List containing all emotes in the message.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.RawEmoteSetString">
            <summary>
            The raw emote set string obtained from Twitch, for legacy purposes.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.EmoteSet.#ctor(System.String,System.String)">
            <summary>
            Constructor for ChatEmoteSet object.
            </summary>
            <param name="emoteSetData"></param>
            <param name="message"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.EmoteSet.Emote">
            <summary>
            Object representing an emote in an EmoteSet in a chat message.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.Id">
            <summary>Twitch-assigned emote Id.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.Name">
            <summary>The name of the emote. For example, if the message was "This is Kappa test.", the name would be 'Kappa'.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.StartIndex">
            <summary>Character starting index. For example, if the message was "This is Kappa test.", the start index would be 8 for 'Kappa'.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.EndIndex">
            <summary>Character ending index. For example, if the message was "This is Kappa test.", the start index would be 12 for 'Kappa'.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.EmoteSet.Emote.ImageUrl">
            <summary>URL to Twitch hosted emote image.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.EmoteSet.Emote.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Emote constructor.
            </summary>
            <param name="emoteId"></param>
            <param name="name"></param>
            <param name="emoteStartIndex"></param>
            <param name="emoteEndIndex"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.ChatMessage">
            <summary>Class represents ChatMessage in a Twitch channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.BotUsername">
            <summary>Twitch username of the bot that received the message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.UserId">
            <summary>Twitch-unique integer assigned on per account basis.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Username">
            <summary>Username of sender of chat message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.DisplayName">
            <summary>Case-sensitive username of sender of chat message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.ColorHex">
            <summary>Hex representation of username color in chat (THIS CAN BE NULL IF VIEWER HASN'T SET COLOR).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Color">
            <summary>Property representing HEX color as a System.Drawing.Color object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.EmoteSet">
            <summary>Emote Ids that exist in message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Message">
            <summary>Twitch chat message contents.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.UserType">
            <summary>User type can be viewer, moderator, global mod, admin, or staff</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Channel">
            <summary>Twitch channel message was sent from (useful for multi-channel bots).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Subscriber">
            <summary>Channel specific subscriber status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Turbo">
            <summary>Twitch site-wide turbo status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsModerator">
            <summary>Channel specific moderator status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsMe">
            <summary>Chat message /me identifier flag.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.IsBroadcaster">
            <summary>Chat message from broadcaster identifier flag</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.RawIrcMessage">
            <summary>Raw IRC-style text received from Twitch.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.EmoteReplacedMessage">
            <summary>Text after emotes have been handled (if desired). Will be null if replaceEmotes is false.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Badges">
            <summary>List of key-value pair badges.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.CheerBadge">
            <summary>If a cheer badge exists, this property represents the raw value and color (more later). Can be null.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.Bits">
            <summary>If viewer sent bits in their message, total amount will be here.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ChatMessage.BitsInDollars">
            <summary>Number of USD (United States Dollars) spent on bits.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ChatMessage.#ctor(System.String,System.String,TwitchLib.Models.Client.MessageEmoteCollection@,System.Boolean)">
            <summary>Constructor for ChatMessage object.</summary>
            <param name="botUsername">The username of the bot that received the message.</param>
            <param name="ircString">The raw string received from Twitch to be processed.</param>
            <param name="emoteCollection">The <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection"/> to register new emotes on and, if desired, use for emote replacement.</param>
            <param name="replaceEmotes">Whether to replace emotes for this chat message. Defaults to false.</param>
        </member>
        <member name="T:TwitchLib.Models.Client.CheerBadge">
            <summary>Class representing cheer badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.CheerBadge.CheerAmount">
            <summary>Property representing raw cheer amount represented by badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.CheerBadge.Color">
            <summary>Property representing the color of badge via an enum.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.CheerBadge.#ctor(System.Int32)">
            <summary>Constructor for CheerBadge</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.DetectionReturn">
            <summary>Class representing a detection return object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.DetectionReturn.Successful">
            <summary>Property representing whether detection was successful.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.DetectionReturn.Channel">
            <summary>Property representing the detected channel, could be null.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.DetectionReturn.#ctor(System.Boolean,System.String)">
            <summary>DetectionReturn object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.JoinedChannel">
            <summary>Class representing a joined channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.JoinedChannel.ChannelState">
            <summary>Object representing current state of channel (r9k, slow, etc).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.JoinedChannel.Channel">
            <summary>The current channel the TwitcChatClient is connected to.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.JoinedChannel.PreviousMessage">
            <summary>The most recent message received.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.JoinedChannel.#ctor(System.String)">
            <summary>JoinedChannel object constructor.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.JoinedChannel.HandleMessage(TwitchLib.Models.Client.ChatMessage)">
            <summary>Handles a message</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote">
            <summary>Class for maintaining emotes that may be substituted into messages.</summary>
            <remarks>
                Also contains helpers to aid in performing actual replacements.
                Expected to be called from the context of <see cref="T:TwitchLib.Models.Client.ChatMessage"/> and <see cref="T:TwitchLib.Models.Client.WhisperMessage"/>.
            </remarks>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote.ReplaceEmoteDelegate">
            <summary>
                Delegate allowing Emotes to handle their replacement text on a case-by-case basis.
            </summary>
            <returns>The string for the calling emote to be replaced with.</returns>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.TwitchEmoteUrls">
            <summary>
                Collection of Composite Format Strings which will substitute an
                emote ID to get a URL for an image from the Twitch CDN
            </summary>
            <remarks>
                These are sorted such that the <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> enum can be used as an index,
                eg TwitchEmoteUrls[<see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>]
            </remarks>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.FrankerFaceZEmoteUrls">
            <summary>
                Collection of Composite Format Strings which will substitute an
                emote ID to get a URL for an image from the FFZ CDN
            </summary>
            <remarks>
                These are sorted such that the <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> enum can be used as an index,
                eg FrankerFaceZEmoteUrls[<see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>]
                WARNING: FrankerFaceZ does not require users to submit all sizes,
                so using something other than Small images may result in broken links!
            </remarks>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.BetterTwitchTvEmoteUrls">
            <summary>
                Collection of Composite Format Strings which will substitute
                an emote ID to get a URL for an image from the BTTV CDN
                </summary>
            <remarks>
                These are sorted such that the <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> enum can be used as an index,
                eg BetterTwitchTvEmoteUrls[<see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>]
            </remarks>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmote.SourceMatchingReplacementText(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                A delegate which attempts to match the calling <see cref="T:TwitchLib.Models.Client.MessageEmote"/> with its
                <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSource"/> and pulls the <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small">small</see> version
                of the URL.
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote.EmoteSource">
            <summary> Enum supplying the supported sites which provide Emote images.</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.Twitch">
            <summary>Emotes hosted by Twitch.tv natively</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.FrankerFaceZ">
            <summary>Emotes hosted by FrankerFaceZ.com</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.BetterTwitchTv">
            <summary>Emotes hosted by BetterTTV.net</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmote.EmoteSize">
            <summary> Enum denoting the emote sizes</summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small">
            <summary>
                Best support
                Small-sized emotes are the standard size used in the Twitch web chat.
            </summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Medium">
            <summary>
                Medium-sized emotes are not supported by all browsers, and
                FrankerFaceZ does not require emotes to be submitted in this size
            </summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Large">
            <summary>
                Large-sized emotes are not supported by all browsers, and
                FrankerFaceZ does not require emotes to be submitted in this size
                </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Id">
            <summary>
                Emote ID as used by the emote source. Will be provided as {0}
                to be substituted into the indicated URL if needed.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Text">
            <summary>
                Emote text which appears in a message and is meant to be replaced by the emote image.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Source">
            <summary>
                The specified <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSource"/> for this emote.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.Size">
            <summary>
                The specified <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> for this emote.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.ReplacementString">
            <summary>
               The string to substitute emote text for.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.ReplacementDelegate">
            <summary>
                The desired <see cref="T:TwitchLib.Models.Client.MessageEmote.ReplaceEmoteDelegate"/> to use for replacing text in a given emote.
                Default: <see cref="M:TwitchLib.Models.Client.MessageEmote.SourceMatchingReplacementText(TwitchLib.Models.Client.MessageEmote)"/>
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmote.EscapedText">
            <summary>
                The emote text <see cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)">regex-escaped</see>
                so that it can be embedded into a regex pattern.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmote.#ctor(System.String,System.String,TwitchLib.Models.Client.MessageEmote.EmoteSource,TwitchLib.Models.Client.MessageEmote.EmoteSize,TwitchLib.Models.Client.MessageEmote.ReplaceEmoteDelegate)">
            <summary>
                Constructor for a new MessageEmote instance.
            </summary>
            <param name="id">
                The unique identifier which the emote provider uses to generate CDN URLs.
            </param>
            <param name="text">
                The string which users type to create this emote in chat.
            </param>
            <param name="source">
                An <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSource"/> where an image can be found for this emote.
                Default: <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.Twitch"/>
            </param>
            <param name="size">
                An <see cref="T:TwitchLib.Models.Client.MessageEmote.EmoteSize"/> to pull for this image.
                Default: <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSize.Small"/>
            </param>
            <param name="replacementDelegate">
                A string (optionally Composite Format with "{0}" representing
                <paramref name="id"/>) which will be used instead of any of the emote URLs.
                Default: null
            </param>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmoteCollection">
            <summary>
                Helper class which maintains a collection of all emotes active for a given channel.
            </summary>
        </member>
        <member name="F:TwitchLib.Models.Client.MessageEmoteCollection._currentPattern">
            <summary> Do not access directly! Backing field for <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentPattern"/> </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentPattern">
            <summary>
                Property so that we can be confident <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.PatternChanged"/>
                always reflects changes to <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentPattern"/>.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.#ctor">
            <summary>
                Default, empty constructor initializes the list and sets the preferred
                <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/> to <see cref="M:TwitchLib.Models.Client.MessageEmoteCollection.AllInclusiveEmoteFilter(TwitchLib.Models.Client.MessageEmote)"/>
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.#ctor(TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate)">
            <summary>
                Constructor which specifies a particular preferred <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/>
            </summary>
            <param name="preferredFilter"></param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.Add(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                Adds an <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to the collection. Duplicate emotes
                (judged by <see cref="P:TwitchLib.Models.Client.MessageEmote.Text"/>) are ignored.
            </summary>
            <param name="emote">The <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to add to the collection.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.Merge(System.Collections.Generic.IEnumerable{TwitchLib.Models.Client.MessageEmote})">
            <summary>
                Adds every <see cref="T:TwitchLib.Models.Client.MessageEmote"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1">enumerable</see>
                collection to the internal collection.
                Duplicate emotes (judged by <see cref="P:TwitchLib.Models.Client.MessageEmote.Text"/>) are ignored.
            </summary>
            <param name="emotes">A collection of <see cref="T:TwitchLib.Models.Client.MessageEmote"/>s.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.Remove(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                Removes the specified <see cref="T:TwitchLib.Models.Client.MessageEmote"/> from the collection.
            </summary>
            <param name="emote">The <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to remove.</param>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.RemoveAll">
            <summary>
                Removes all <see cref="T:TwitchLib.Models.Client.MessageEmote"/>s from the collection.
            </summary>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.ReplaceEmotes(System.String,TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate)">
            <summary>
                Replaces all instances of all registered emotes passing the provided
                <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/> with their designated
                <see cref="P:TwitchLib.Models.Client.MessageEmote.ReplacementString"/>s
            </summary>
            <param name="originalMessage">
                The original message which needs to be processed for emotes.
            </param>
            <param name="del">
                An <see cref="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate"/> which returns true if its
                received <see cref="T:TwitchLib.Models.Client.MessageEmote"/> is to be replaced.
                Defaults to <see cref="P:TwitchLib.Models.Client.MessageEmoteCollection.CurrentEmoteFilter"/>.
            </param>
            <returns>
                A string where all of the original emote text has been replaced with
                its designated <see cref="P:TwitchLib.Models.Client.MessageEmote.ReplacementString"/>s
            </returns>
        </member>
        <member name="T:TwitchLib.Models.Client.MessageEmoteCollection.EmoteFilterDelegate">
            <summary>
                A delegate function which, when given a <see cref="T:TwitchLib.Models.Client.MessageEmote"/>,
                determines whether it should be replaced.
            </summary>
            <param name="emote">The <see cref="T:TwitchLib.Models.Client.MessageEmote"/> to be considered</param>
            <returns>true if the <see cref="T:TwitchLib.Models.Client.MessageEmote"/> should be replaced.</returns>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.AllInclusiveEmoteFilter(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                The default emote filter includes every <see cref="T:TwitchLib.Models.Client.MessageEmote"/> registered on this list.
            </summary>
            <param name="emote">An emote which is ignored in this filter.</param>
            <returns>true always</returns>
        </member>
        <member name="M:TwitchLib.Models.Client.MessageEmoteCollection.TwitchOnlyEmoteFilter(TwitchLib.Models.Client.MessageEmote)">
            <summary>
                This emote filter includes only <see cref="T:TwitchLib.Models.Client.MessageEmote"/>s provided by Twitch.
            </summary>
            <param name="emote">
                A <see cref="T:TwitchLib.Models.Client.MessageEmote"/> which will be replaced if its
                <see cref="P:TwitchLib.Models.Client.MessageEmote.Source">Source</see> is <see cref="F:TwitchLib.Models.Client.MessageEmote.EmoteSource.Twitch"/>
            </param>
            <returns>true always</returns>
        </member>
        <member name="T:TwitchLib.Models.Client.ReSubscriber">
            <summary>Class representing a resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Badges">
            <summary>Property representing list of badges assigned.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.ColorHex">
            <summary>Property representing the colorhex of the resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.DisplayName">
            <summary>Property representing resubscriber's customized display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.EmoteSet">
            <summary>Property representing emote set of resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Id">
            <summary>Property representing resub message id</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Login">
            <summary>Property representing login of resubscription event.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.SystemMessage">
            <summary>Property representing internval system message value.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.SystemMessageParsed">
            <summary>Property representing internal system message value, parsed.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.ResubMessage">
            <summary>Property representing </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Months">
            <summary>Property representing number of months of being subscribed.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.RoomId">
            <summary>Property representing the room id.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.UserId">
            <summary>Property representing the user's id.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Mod">
            <summary>Property representing whether or not the resubscriber is a moderator.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Turbo">
            <summary>Property representing whether or not the resubscriber is a turbo member.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Sub">
            <summary>Property representing whether or not the resubscriber is a subscriber (YES).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.UserType">
            <summary>Property representing the user type of the resubscriber.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.RawIrc">
            <summary>Property representing the raw IRC message (for debugging/customized parsing)</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.Channel">
            <summary>Property representing the channel the resubscription happened in.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ReSubscriber.IsTwitchPrime">
            <summary>Property representing if the resubscription came from Twitch Prime.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ReSubscriber.#ctor(System.String)">
            <summary>ReSubscriber object constructor.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ReSubscriber.ToString">
            <summary>Overriden ToString method, prints out all properties related to resub.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.ConnectionCredentials">
            <summary>Class used to store credentials used to connect to Twitch chat/whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchUsername">
            <summary>Property representing bot's username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchOAuth">
            <summary>Property representing bot's oauth.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchHost">
            <summary>Property representing Twitch's host address</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.ConnectionCredentials.TwitchPort">
            <summary>Property representing Twitch's host port</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.ConnectionCredentials.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>Constructor for ConnectionCredentials object.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.NewSubscriber">
            <summary>Class represents a new (not renew) subscriber to a Twitch channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.NewSubscriber.Channel">
            <summary>Channel the subscriber was detected from (useful for multi-channel bots).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.NewSubscriber.Name">
            <summary>Username of user that subscribed to channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.NewSubscriber.IsTwitchPrime">
            <summary>Boolean to indicate whether the subscription was normal or via TwitchPrime</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.NewSubscriber.#ctor(System.String)">
            <summary>Constructor for NewSubscriber object.</summary>
        </member>
        <member name="T:TwitchLib.Models.Client.UserState">
            <summary>Class representing state of a specific user.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Badges">
            <summary>Properrty representing the chat badges a specific user has.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.ColorHex">
            <summary>Properrty representing HEX user's name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.DisplayName">
            <summary>Property representing user's display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.EmoteSet">
            <summary>Property representing emote sets available to user.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Channel">
            <summary>Property representing channel.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Subscriber">
            <summary>Property representing subscriber status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.Moderator">
            <summary>Property representing Turbo status.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.UserState.UserType">
            <summary>Property representing returned user type of user.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.UserState.#ctor(System.String)">
            <summary>
            Constructor for UserState.
            </summary>
            <param name="ircString"></param>
        </member>
        <member name="T:TwitchLib.Models.Client.WhisperMessage">
            <summary>
            Class representing a received whisper from TwitchWhisperClient
            </summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Badges">
            <summary>Property representing dynamic badges assigned to message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.ColorHex">
            <summary>Property representing HEX representation of color of username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Color">
            <summary>Property representing HEX color as a System.Drawing.Color object.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Username">
            <summary>Property representing sender Username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.DisplayName">
            <summary>Property representing sender DisplayName (can be null/blank).</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.EmoteSet">
            <summary>Property representing list of string emotes in message.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.ThreadId">
            <summary>Property representing identifier of the message thread.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.MessageId">
            <summary>Property representing message identifier.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.UserId">
            <summary>Property representing sender identifier.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Turbo">
            <summary>Property representing whether or not sender has Turbo.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.BotUsername">
            <summary>Property representing bot's username.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.Message">
            <summary>Property representing message contents.</summary>
        </member>
        <member name="P:TwitchLib.Models.Client.WhisperMessage.UserType">
            <summary>Property representing user type of sender.</summary>
        </member>
        <member name="M:TwitchLib.Models.Client.WhisperMessage.#ctor(System.String,System.String)">
            <summary>
            WhisperMessage constructor.
            </summary>
            <param name="ircString">Received IRC string from Twitch server.</param>
            <param name="botUsername">Active bot username receiving message.</param>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper">
            <summary>
            Class representing a whisper received via PubSub.
            </summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.Type">
            <summary>Type of MessageData</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.Data">
            <summary>Data identifier in MessageData</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObject">
            <summary>Object that houses the data accompanying the type.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.#ctor(System.String)">
            <summary>Whisper object constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj">
            <summary>Class representing the data in the MessageData object.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Id">
            <summary>DataObject identifier</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.ThreadId">
            <summary>Twitch assigned thread id</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Body">
            <summary>Body of data received from Twitch</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.SentTs">
            <summary>Timestamp generated by Twitc</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.FromId">
            <summary>Id of user that sent whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Tags">
            <summary>Tags object housing associated tags.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Recipient">
            <summary>Receipient object housing various properties about user who received whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Nonce">
            <summary>Uniquely generated string used to identify response from request.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>DataObj constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj">
            <summary>Class representing the tags associated with the whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Login">
            <summary>Login value associated.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.DisplayName">
            <summary>Display name found in chat.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Color">
            <summary>Color of whispers</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.UserType">
            <summary>User type of whisperer</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Turbo">
            <summary>True or false for whether whisperer is turbo</summary>
        </member>
        <member name="F:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Emotes">
            <summary>List of emotes found in whisper</summary>
        </member>
        <member name="F:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.Badges">
            <summary>All badges associated with the whisperer</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj">
            <summary>Class representing a single emote found in a whisper</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.Id">
            <summary>Emote ID</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.Start">
            <summary>Starting character of emote</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.End">
            <summary>Ending character of emote</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.TagsObj.EmoteObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>EmoteObj construcotr.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj">
            <summary>Class representing the recipient of the whisper.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Id">
            <summary>Receiver id</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Username">
            <summary>Receiver username</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.DisplayName">
            <summary>Receiver display name.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Color">
            <summary>Receiver color.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.UserType">
            <summary>User type of receiver.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Turbo">
            <summary>True or false on whther receiver has turbo or not.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.Badges">
            <summary>List of badges that the receiver has.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.RecipientObj.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>RecipientObj constructor.</summary>
        </member>
        <member name="T:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge">
            <summary>Class representing a single badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge.Id">
            <summary>Id of the badge.</summary>
        </member>
        <member name="P:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge.Version">
            <summary>Version of the badge.</summary>
        </member>
        <member name="M:TwitchLib.Models.PubSub.Responses.Messages.Whisper.DataObj.Badge.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary></summary>
        </member>
        <member name="T:TwitchLib.Common.Helpers">
            <summary>
            Static class of helper functions used around the project.
            </summary>
        </member>
        <member name="M:TwitchLib.Common.Helpers.ImageToBase64(System.Drawing.Image)">
            <summary>
            Function that converts Image object to a base64 string.
            </summary>
            <param name="image">Image object represting the image to turn to base64 string.</param>
            <returns>Base64 string of image.</returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.JsonIsNullOrEmpty(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Function to check if a jtoken is null.
            Credits: http://stackoverflow.com/questions/24066400/checking-for-empty-null-jtoken-in-a-jobject
            </summary>
            <param name="token">JToken to check if null or not.</param>
            <returns>Boolean on whether true or not.</returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.DateTimeStringToObject(System.String)">
            <summary>Takes date time string received from Twitch API and converts it to DateTime object.</summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.Common.Helpers.ParseQuotesAndNonQuotes(System.String)">
            <summary>
            Parses out strings that have quotes, ideal for commands that use quotes for parameters
            </summary>
            <param name="message">Input string to attempt to parse.</param>
            <returns>List of contents of quotes from the input string</returns>
        </member>
        <member name="M:TwitchLib.Common.Logging.Log(System.String,System.Boolean,System.Boolean,TwitchLib.Enums.LogType)">
            <summary>
            Writes message to console output. Maintains foreground color while applying a temporary color. Locks output to ensure color is applied (may be incorrect way to go about it)
            </summary>
            <param name="message"></param>
            <param name="includeDate"></param>
            <param name="includeTime"></param>
            <param name="type"></param>
        </member>
        <member name="T:TwitchLib.Enums.BadgeColor">
            <summary>Color enum representing color based on cheer amount.</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Red">
            <summary>Red = 10000+</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Blue">
            <summary>Blue = 5000 -> 9999</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Green">
            <summary>Green = 1000 -> 4999</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Purple">
            <summary>Purple = 100 -> 999</summary>
        </member>
        <member name="F:TwitchLib.Enums.BadgeColor.Gray">
            <summary>Gray = 1 -> 99</summary>
        </member>
        <member name="T:TwitchLib.Enums.ChatColorPresets">
            <summary>
            <summary>Enum representing the available chat name color presets.</summary>
            </summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Blue">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Coral">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.DodgerBlue">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.SpringGreen">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.YellowGreen">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Green">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.OrangeRed">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Red">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.HotPink">
            <summary>Chat color name.</summary>GoldenRod,
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.CadetBlue">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.SeaGreen">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Chocolate">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.BlueViolet">
            <summary>Chat color name.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ChatColorPresets.Firebrick">
            <summary>Chat color name.</summary>
        </member>
        <member name="T:TwitchLib.Enums.CommercialLength">
            <summary>
            A list of valid commercial lengths.
            </summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds30">
            <summary>30 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds60">
            <summary>60 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds90">
            <summary>90 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds120">
            <summary>120 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds150">
            <summary>150 second commercial</summary>
        </member>
        <member name="F:TwitchLib.Enums.CommercialLength.Seconds180">
            <summary>180 second commercial</summary>
        </member>
        <member name="T:TwitchLib.Enums.LogType">
            <summary>
            Enum to alter color effects in log
            </summary>
        </member>
        <member name="F:TwitchLib.Enums.LogType.Normal">
            <summary>White</summary>
        </member>
        <member name="F:TwitchLib.Enums.LogType.Failure">
            <summary>Red</summary>
        </member>
        <member name="F:TwitchLib.Enums.LogType.Success">
            <summary>Green</summary>
        </member>
        <member name="T:TwitchLib.Enums.Period">
            <summary>
            Period value used to specify time frame for clips.
            </summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.Day">
            <summary>Represents a single day.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.Week">
            <summary>Represents a single week.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.Month">
            <summary>Represents a single month.</summary>
        </member>
        <member name="F:TwitchLib.Enums.Period.All">
            <summary>Represents a all time frames.</summary>
        </member>
        <member name="T:TwitchLib.Enums.PubSubRequestType">
            <summary>Enum representing various request types for PubSub service</summary>
        </member>
        <member name="F:TwitchLib.Enums.PubSubRequestType.ListenToTopic">
            <summary>Type of request to listen to a specific topic</summary>
        </member>
        <member name="T:TwitchLib.Enums.SendReceiveDirection">
            <summary>
            Enum to show which direction the message was detected from.
            </summary>
        </member>
        <member name="F:TwitchLib.Enums.SendReceiveDirection.Sent">
            <summary>Used for logging, direction of data.</summary>
        </member>
        <member name="F:TwitchLib.Enums.SendReceiveDirection.Received">
            <summary>Used for logging, direction of data.</summary>
        </member>
        <member name="T:TwitchLib.Enums.SortDirection">
            <summary>
            A list of valid sorting directions.
            </summary>
        </member>
        <member name="F:TwitchLib.Enums.SortDirection.Descending">
            <summary>Descending sort direction.</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortDirection.Ascending">
            <summary>Ascending sort direction.</summary>
        </member>
        <member name="T:TwitchLib.Enums.SortKey">
            <summary>Enum representing sort keys available for /follows/channels/</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortKey.CreatedAt">
            <summary>SortKey representing the date/time of account creation</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortKey.LastBroadcaster">
            <summary>SortKey representing the date/time of the last broadcast of a channel</summary>
        </member>
        <member name="F:TwitchLib.Enums.SortKey.Login">
            <summary>SortKey representing the alphabetical sort based on usernames</summary>
        </member>
        <member name="T:TwitchLib.Enums.StringEnum">
            <summary>Really cool way of doing string enums, credits to RogueException (https://github.com/RogueException)</summary>
        </member>
        <member name="P:TwitchLib.Enums.StringEnum.Value">
            <summary>Value of enum</summary>
        </member>
        <member name="M:TwitchLib.Enums.StringEnum.#ctor(System.String)">
            <summary>StringEnum constructor.</summary>
        </member>
        <member name="M:TwitchLib.Enums.StringEnum.ToString">
            <summary>
            Returns string value for overriden ToString()
            </summary>
            <returns>Enum value</returns>
        </member>
        <member name="T:TwitchLib.Enums.ThrottleType">
            <summary>Enum representing the available throttle types.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ThrottleType.TooManyMessages">
            <summary>Throttle based on too many messages.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ThrottleType.MessageTooShort">
            <summary>Throttle based on message being too short.</summary>
        </member>
        <member name="F:TwitchLib.Enums.ThrottleType.MessageTooLong">
            <summary>Throttle based on message being too long.</summary>
        </member>
        <member name="T:TwitchLib.Enums.UserType">
            <summary>Enum representing various user-types.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Viewer">
            <summary>The standard user-type representing a standard viewer.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Moderator">
            <summary>User-type representing viewers with channel-specific moderation powers.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.GlobalModerator">
            <summary>User-type representing viewers with Twitch-wide moderation powers.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Broadcaster">
            <summary>User-type representing the broadcaster of the channel</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Admin">
            <summary>User-type representing viewers with Twitch-wide moderation powers that are paid.</summary>
        </member>
        <member name="F:TwitchLib.Enums.UserType.Staff">
            <summary>User-type representing viewers that are Twitch employees.</summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.BanUserExt.BanUser(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using JoinedChannel
            </summary>
            <param name="channel">JoinedChannel object to send ban to</param>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.BanUserExt.BanUser(TwitchLib.TwitchClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using a string for the channel
            </summary>
            <param name="channel">Channel in string form to send ban to</param>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.BanUserExt.BanUser(TwitchLib.TwitchClient,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using the first joined channel
            </summary>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ChangeChatColorExt.ChangeChatColor(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,TwitchLib.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="channel">JoinedChannel object representing which channel to send command to.</param>
            <param name="color">Enum representing available chat preset colors.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ChangeChatColorExt.ChangeChatColor(TwitchLib.TwitchClient,System.String,TwitchLib.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="channel">String representing the channel to send the command to.</param>
            <param name="color">Enum representing available chat preset colors.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ChangeChatColorExt.ChangeChatColor(TwitchLib.TwitchClient,TwitchLib.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="color">Enum representing available chat preset colors.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ClearChatExt.ClearChat(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send clear chat command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ClearChatExt.ClearChat(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="channel">String representation of which channel to send clear chat command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ClearChatExt.ClearChat(TwitchLib.TwitchClient)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.CommercialExt.StartCommercial(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,TwitchLib.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the ad to.</param>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.CommercialExt.StartCommercial(TwitchLib.TwitchClient,System.String,TwitchLib.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="channel">String representation of the channel to send the ad to.</param>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.CommercialExt.StartCommercial(TwitchLib.TwitchClient,TwitchLib.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the enable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.TwitchClient,System.String)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="channel">String representation of the channel to send the enable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.TwitchClient)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the disable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="channel">String representation of the channel to send the disable emote only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.TwitchClient)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.ChangeChatColor(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="channel">JoinedChannel object representing which channel to send command to.</param>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.ChangeChatColor(TwitchLib.TwitchClient,System.String,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="channel">String representing the channel to send the command to.</param>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.ChangeChatColor(TwitchLib.TwitchClient,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="channel">JoinedChannel representation of channel to send command to</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.TwitchClient)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Host(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="userToHost">The channel to be hosted.</param>
            <param name="channel">JoinedChannel representation of which channel to send the host command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Host(TwitchLib.TwitchClient,System.String,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="userToHost">The channel to be hosted.</param>
            <param name="channel">String representation of which channel to send the host command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Host(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="userToHost">The channel to be hosted.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Unhost(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="channel">JoinedChannel representation of the channel to send the unhost command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Unhost(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="channel">String representation of the channel to send the unhost command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.HostExt.Unhost(TwitchLib.TwitchClient)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Mod(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Mod(TwitchLib.TwitchClient,System.String,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Mod(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Unmod(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Unmod(TwitchLib.TwitchClient,System.String,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ModExt.Unmod(TwitchLib.TwitchClient,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.ReplyWhisperExt.ReplyToLastWhisper(TwitchLib.TwitchClient,System.String,System.Boolean)">
            <summary>
            SendWhisper wrapper method that will send a whisper back to the user who most recently sent a whisper to this bot.
            </summary>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOn(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <param name="channel">JoinedChannel representation of which channel to send the slow command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOn(TwitchLib.TwitchClient,System.String,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <param name="channel">String representation of which channel to send the slow command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOn(TwitchLib.TwitchClient,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeoff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send slowoff command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="channel">String representation of which channel to send slowoff command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SlowModeExt.SlowModeOff(TwitchLib.TwitchClient)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOn(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send subscriber only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOn(TwitchLib.TwitchClient,System.String)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="channel">String representation of which channel to send subscriber only command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOn(TwitchLib.TwitchClient)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOff(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="channel">JoinedChannel representation of which channel to send subscriber only off command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOff(TwitchLib.TwitchClient,System.String)">
            <summary>
            Disables subscriber only mode in chat.
            </summary>
            <param name="channel">String representation of which channel to send subscriber only off command to.</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.SubscribersOnly.SubscribersOnlyOff(TwitchLib.TwitchClient)">
            <summary>
            Disables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.TimeoutUserExt.TimeoutUser(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            TImesout a user in chat using a JoinedChannel object.
            </summary>
            <param name="channel">Channel object to send timeout to</param>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.TimeoutUserExt.TimeoutUser(TwitchLib.TwitchClient,System.String,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Timesout a user in chat using a string for the channel.
            </summary>
            <param name="channel">Channel in string form to send timeout to</param>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.TimeoutUserExt.TimeoutUser(TwitchLib.TwitchClient,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Timesout a user using the first joined channel.
            </summary>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.UnbanUserExt.UnbanUser(TwitchLib.TwitchClient,TwitchLib.Models.Client.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using JoinedChannel
            </summary>
            <param name="channel">JoinedChannel object to send unban to</param>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.UnbanUserExt.UnbanUser(TwitchLib.TwitchClient,System.String,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using a string for the channel
            </summary>
            <param name="channel">Channel in string form to send unban to</param>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            /// <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="M:TwitchLib.Extensions.Client.UnbanUserExt.UnbanUser(TwitchLib.TwitchClient,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using first joined channel.
            </summary>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
            <param name="client">Client reference used to identify extension.</param>
        </member>
        <member name="T:TwitchLib.Services.FollowerService">
            <summary>Service that allows customizability and subscribing to detection of new Twitch followers.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.Channel">
            <summary>Property representing Twitch channel service is monitoring.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.ClientId">
            <summary>Property representing application client Id, also updates it in TwitchApi.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.CacheSize">
            <summary>Property representing the number of followers to compare a fresh query against for new followers. Default: 1000.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.QueryCount">
            <summary>Property representing number of recent followers that service should request. Recommended: 25, increase for larger channels. MAX: 100, MINIMUM: 1</summary>
            <exception cref="T:TwitchLib.Exceptions.Services.BadQueryCountException">Throws BadQueryCountException if queryCount is larger than 100 or smaller than 1.</exception>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.ActiveCache">
            <summary>Property representing the cache where detected followers are stored and compared against.</summary>
        </member>
        <member name="P:TwitchLib.Services.FollowerService.CheckIntervalSeconds">
            <summary>Property representing interval between Twitch Api calls, in seconds. Recommended: 60</summary>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>Service constructor.</summary>
            <exception cref="T:TwitchLib.Exceptions.API.BadResourceException">If channel is invalid, an InvalidChannelException will be thrown.</exception>
            <param name="channel">Param representing the channel the service should monitor.</param>
            <param name="checkIntervalSeconds">Param representing number of seconds between calls to Twitch Api.</param>
            <param name="queryCount">Number of recent followers service should request from Twitch Api. Max: 100, Min: 1</param>
            <param name="clientId">Optional param representing Twitch Api-required application client id, not required if already set.</param>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.StartService">
            <summary>Downloads recent followers from Twitch, starts service, fires OnServiceStarted event.</summary>
        </member>
        <member name="M:TwitchLib.Services.FollowerService.StopService">
            <summary>Stops service and fires OnServiceStopped event.</summary>
        </member>
        <member name="E:TwitchLib.Services.FollowerService.OnServiceStarted">
            <summary>Event fires when service starts.</summary>
        </member>
        <member name="E:TwitchLib.Services.FollowerService.OnServiceStopped">
            <summary>Event fires when service stops.</summary>
        </member>
        <member name="E:TwitchLib.Services.FollowerService.OnNewFollowersDetected">
            <summary>Event fires when new followers are detected.</summary>
        </member>
        <member name="T:TwitchLib.Services.MessageThrottler">
            <summary>Class used to throttle chat and whsiper messages to enforce guidelines.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.MessagesAllowedInPeriod">
            <summary>Property representing number of messages allowed before throttling in a period.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.PeriodDuration">
            <summary>Property representing the time period for throttling.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.MinimumMessageLengthAllowed">
            <summary>Property representing minimum message length for throttling.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.MaximumMessageLengthAllowed">
            <summary>Property representing maximum message length before throttling.</summary>
        </member>
        <member name="P:TwitchLib.Services.MessageThrottler.ApplyThrottlingToRawMessages">
            <summary>Property representing whether throttling should be applied to raw messages.</summary>
        </member>
        <member name="M:TwitchLib.Services.MessageThrottler.#ctor(System.Int32,System.TimeSpan,System.Boolean,System.Int32,System.Int32)">
            <summary>messageThrottler constructor.</summary>
        </member>
        <member name="M:TwitchLib.Services.MessageThrottler.MessagePermitted(System.String)">
            <summary>Function that verifies a message is legal, returns true/false on message legality.</summary>
        </member>
        <member name="E:TwitchLib.Services.MessageThrottler.OnClientThrottled">
            <summary>Event fires when service starts.</summary>
        </member>
        <member name="E:TwitchLib.Services.MessageThrottler.OnThrottledPeriodReset">
            <summary>Event fires when service stops.</summary>
        </member>
        <member name="T:TwitchLib.TwitchApi">
            <summary>
            Fully featured Twitch API wrapper.
            </summary>
        </member>
        <member name="T:TwitchLib.TwitchApi.Channels">
            <summary>
            Twitch API calls relating to Twitch channels.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelsObject(System.String)">
            <summary>
            [SYNC] Retrieves a Channels object regarding a specific channel.
            </summary>
            <param name="channel">The channel to fetch Channels object about.</param>
            <returns>Channels object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelsObjectAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a Channels object regarding a specific channel.
            </summary>
            <param name="channel">The channel to fetch Channels object about.</param>
            <returns>Channels object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelBadges(System.String)">
            <summary>
            [SYNC] Retrieves a channel's list of available chat badges.
            </summary>
            <param name="channel">The channel to fetch available badges from.</param>
            <returns>BadgeResponse object containing list of available badges.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelBadgesAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a channel's list of available chat badges.
            </summary>
            <param name="channel">The channel to fetch available badges from.</param>
            <returns>BadgeResponse object containing list of available badges.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelEditors(System.String,System.String)">
            <summary>
            [SYNC] Retrieves a string list of channel editor users.
            <para>Authenticated, required scope: <code>channel_read</code></para>
            </summary>
            <param name="channel">The channel to fetch editors from.</param>
            <param name="accessToken">An access token with the required scope.</param>
            <returns>A list of User objects that are channel editors.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelEditorsAsync(System.String,System.String)">
            <summary>
            [ASYNC] Retrieves a string list of channel editor users.
            <para>Authenticated, required scope: <code>channel_read</code></para>
            </summary>
            <param name="channel">The channel to fetch editors from.</param>
            <param name="accessToken">An access token with the required scope.</param>
            <returns>A list of User objects that are channel editors.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelHosts(System.String)">
            <summary>
            [SYNC] Retrieves a string list of channels hosting a specified channel.
            <para>Note: This uses an undocumented API endpoint and reliability is not guaranteed. Additionally, this makes 2 API calls so limited use is recommended.</para>
            </summary>
            <param name="channel">The name of the channel to search for.</param>
            <returns>A list of all channels that are currently hosting the specified channel.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelHostsAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a string list of channels hosting a specified channel.
            <para>Note: This uses an undocumented API endpoint and reliability is not guaranteed. Additionally, this makes 2 API calls so limited use is recommended.</para>
            </summary>
            <param name="channel">The name of the channel to search for.</param>
            <returns>A list of all channels that are currently hosting the specified channel.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannel(System.String)">
            <summary>
            [SYNC] Retrieves a TwitchStream object containing API data related to a stream.
            </summary>
            <param name="channel">The name of the channel to search for.</param>
            <returns>A TwitchStream object containing API data related to a stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a TwitchStream object containing API data related to a stream.
            </summary>
            <param name="channel">The name of the channel to search for.</param>
            <returns>A TwitchStream object containing API data related to a stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.SearchChannels(System.String,System.Int32,System.Int32)">
            <summary>
            [SYNC] Execute a search query on Twitch to find a list of channels.
            </summary>
            <param name="query">A url-encoded search query.</param>
            <param name="limit">Maximum number of objects in array. Default is 25. Maximum is 100.</param>
            <param name="offset">Object offset for pagination. Default is 0.</param>
            <returns>A list of Channel objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.SearchChannelsAsync(System.String,System.Int32,System.Int32)">
            <summary>
            [ASYNC] Execute a search query on Twitch to find a list of channels.
            </summary>
            <param name="query">A url-encoded search query.</param>
            <param name="limit">Maximum number of objects in array. Default is 25. Maximum is 100.</param>
            <param name="offset">Object offset for pagination. Default is 0.</param>
            <returns>A list of Channel objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelFeed(System.String,System.Int32,System.String)">
            <summary>
            [SYNC] Retrieves channel feed posts.
            </summary>
            <param name="channel">Channel to fetch feed posts from.</param>
            <param name="limit">Applied limit (default 10, max 100)</param>
            <param name="cursor">Used for pagination.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelFeedAsync(System.String,System.Int32,System.String)">
            <summary>
            [ASYNC] Retrieves channel feed posts.
            </summary>
            <param name="channel">Channel to fetch feed posts from.</param>
            <param name="limit">Applied limit (default 10, max 100)</param>
            <param name="cursor">Used for pagination.</param>
            <returns></returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.PostToChannelFeed(System.String,System.Boolean,System.String,System.String)">
            <summary>
            [SYNC] Posts to a Twitch channel's feed.
            </summary>
            <param name="content">The content of the message being posted.</param>
            <param name="accessToken">OAuth access token with channel_feed_edit scope, not needed if already set.</param>
            <param name="channel">Channel to post feed post to.</param>
            <param name="share">If set to true, and enabled on account, will tweet out post.</param>
            <returns>Returns object with Post object and URL to tweet if available.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.PostToChannelFeedAsync(System.String,System.Boolean,System.String,System.String)">
            <summary>
            [ASYNC] Posts to a Twitch channel's feed.
            </summary>
            <param name="content">The content of the message being posted.</param>
            <param name="accessToken">OAuth access token with channel_feed_edit scope, not needed if already set.</param>
            <param name="channel">Channel to post feed post to.</param>
            <param name="share">If set to true, and enabled on account, will tweet out post.</param>
            <returns>Returns object with Post object and URL to tweet if available.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.DeleteChannelFeedPost(System.String,System.String,System.String)">
            <summary>
            [SYNC] Deletes a post on a Twitch channel's feed.
            </summary>
            <param name="postId">Integer Id of feed post to delete.</param>
            <param name="channel">Channel where the post resides.</param>
            <param name="accessToken">OAuth access token with channel_feed_edit scope.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.DeleteChannelFeedPostAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Deletes a post on a Twitch channel's feed.
            </summary>
            <param name="postId">Integer Id of feed post to delete.</param>
            <param name="channel">Channel where the post resides.</param>
            <param name="accessToken">OAuth access token with channel_feed_edit scope.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelFromSteamId(System.String)">
            <summary>
            [SYNC] Fetches Twitch channel name from a steam Id, if their Steam is connected to their Twitch.
            </summary>
            <param name="steamId">The steam id of the user whose Twitch channel is requested.</param>
            <returns>Returns channel name if available, or null.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelFromSteamIdAsync(System.String)">
            <summary>
            [ASYNC] Fetches Twitch channel name from a steam Id, if their Steam is connected to their Twitch.
            </summary>
            <param name="steamId">The steam id of the user whose Twitch channel is requested.</param>
            <returns>Returns channel name if available, or null.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelCommunity(System.String)">
            <summary>
            [SYNC] Fetches the community that a channel is currently in.
            </summary>
            <param name="channelId">The channel ID to fetch the community of.</param>
            <returns>Returns Communnity object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.GetChannelCommunityAsync(System.String)">
            <summary>
            [ASYNC] Fetches the community that a channel is currently in.
            </summary>
            <param name="channelId">The channel ID to fetch the community of.</param>
            <returns>Returns Communnity object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.SetChannelCommunity(System.String,System.String,System.String)">
            <summary>
            [SYNC] Attempts to set the community of a channel.
            </summary>
            <param name="channelId">The channel ID to apply the community to.</param>
            <param name="communityId">The community ID to be applied to channel.</param>
            <param name="accessToken">If access token is not yet set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.SetChannelCommunityAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Attempts to set the community of a channel.
            </summary>
            <param name="channelId">The channel ID to apply the community to.</param>
            <param name="communityId">The community ID to be applied to channel.</param>
            <param name="accessToken">If access token is not yet set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.RemoveChannelCommunity(System.String,System.String)">
            <summary>
            [SYNC] Attempts to remove a community from a channel.
            </summary>
            <param name="channelId">The Id of the channel to remove the community from.</param>
            <param name="accessToken">If access token is not yet set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Channels.RemoveChannelCommunityAsync(System.String,System.String)">
            <summary>
            [ASYNC] Attempts to remove a community from a channel.
            </summary>
            <param name="channelId">The Id of the channel to remove the community from.</param>
            <param name="accessToken">If access token is not yet set, you must set it here.</param>
        </member>
        <member name="T:TwitchLib.TwitchApi.Teams">
            <summary>
            Twitch API calls relating to Twitch teams.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Teams.GetTeamMembers(System.String)">
            <summary>
            [SYNC] Retrieves a TwitchTeamMember list of all members in a Twitch team.
            <para>Note: This uses an undocumented API endpoint and reliability is not guaranteed.</para>
            </summary>
            <param name="teamName">The name of the Twitch team to search for.</param>
            <returns>A TwitchTeamMember list of all members in a Twitch team.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Teams.GetTeamMembersAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a TwitchTeamMember list of all members in a Twitch team.
            <para>Note: This uses an undocumented API endpoint and reliability is not guaranteed.</para>
            </summary>
            <param name="teamName">The name of the Twitch team to search for.</param>
            <returns>A TwitchTeamMember list of all members in a Twitch team.</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Users">
            <summary>
            Twitch API calls relating to Twitch users.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Users.GetUser(System.String)">
            <summary>
            [SYNC] Retrieves a User object from Twitch Api and returns User object.
            </summary>
            <param name="username">Name of the user you wish to fetch from Twitch.</param>
            <returns>User object containing details about the searched for user. Returns null if invalid user/error.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Users.GetUserAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a User object from Twitch Api and returns User object.
            </summary>
            <param name="username">Name of the user you wish to fetch from Twitch.</param>
            <returns>User object containing details about the searched for user. Returns null if invalid user/error.</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Streams">
            <summary>
            Twitch API calls relating to Twitch streams.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetUptime(System.String)">
            <summary>
            [SYNC] Retrieves the current uptime of a stream, if it is online.
            </summary>
            <param name="channel">The channel to retrieve the uptime for.</param>
            <returns>A TimeSpan object representing time between creation_at of stream, and now.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetUptimeAsync(System.String)">
            <summary>
            [ASYNC] Retrieves the current uptime of a stream, if it is online.
            </summary>
            <param name="channel">The channel to retrieve the uptime for.</param>
            <returns>A TimeSpan object representing time between creation_at of stream, and now.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetStream(System.String)">
            <summary>
            [SYNC] Retrieves a collection of API data from a stream.
            </summary>
            <param name="channel">The channel to retrieve the data for.</param>
            <exception cref="T:TwitchLib.Exceptions.API.StreamOfflineException">Throws StreamOfflineException if stream is offline.</exception>
            <exception cref="T:TwitchLib.Exceptions.API.BadResourceException">Throws BadResourceException if the passed channel is invalid.</exception>
            <returns>A TwitchStream object containing API data related to a stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetStreamAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a collection of API data from a stream.
            </summary>
            <param name="channel">The channel to retrieve the data for.</param>
            <exception cref="T:TwitchLib.Exceptions.API.StreamOfflineException">Throws StreamOfflineException if stream is offline.</exception>
            <exception cref="T:TwitchLib.Exceptions.API.BadResourceException">Throws BadResourceException if the passed channel is invalid.</exception>
            <returns>A TwitchStream object containing API data related to a stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetStreams(System.Collections.Generic.List{System.String})">
            <summary>
            [SYNC] Retrieves a collection of API data from multiple streams
            </summary>
            <param name="channels">List of channels.</param>
            <returns>A list of stream objects for each stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetStreamsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            [ASYNC] Retrieves a collection of API data from multiple streams
            </summary>
            <param name="channels">List of channels.</param>
            <returns>A list of stream objects for each stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetFeaturedStreams(System.Int32,System.Int32)">
            <summary>
            [SYNC] Retrieves all featured streams.
            </summary>
            <returns>A list of featured stream objects for each featured stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetFeaturedStreamsAsync(System.Int32,System.Int32)">
            <summary>
            [ASYNC] Retrieves all featured streams.
            </summary>
            <returns>A list of featured stream objects for each featured stream.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamTitle(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Update the <paramref name="status"/> of a <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_editor</code></para>
            </summary>
            <param name="status">Channel's title.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamTitleAsync(System.String,System.String,System.String)">
            <summary>
            [SYNC] Update the <paramref name="status"/> of a <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_editor</code></para>
            </summary>
            <param name="status">Channel's title.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamGame(System.String,System.String,System.String)">
            <summary>
            [SYNC] Update the <paramref name="game"/> the <paramref name="channel"/> is currently playing.
            <para>Authenticated, required scope: <code>channel_editor</code></para>
            </summary>
            <param name="game">Game category to be classified as.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamGameAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Update the <paramref name="game"/> the <paramref name="channel"/> is currently playing.
            <para>Authenticated, required scope: <code>channel_editor</code></para>
            </summary>
            <param name="game">Game category to be classified as.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamTitleAndGame(System.String,System.String,System.String,System.String)">
            <summary>
            [SYNC] Update the <paramref name="status"/> and <paramref name="game"/> of a <paramref name="channel"/>.
            </summary>
            <param name="status">Channel's title.</param>
            <param name="game">Game category to be classified as.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamTitleAndGameAsync(System.String,System.String,System.String,System.String)">
            <summary>
            [ASYNC] Update the <paramref name="status"/> and <paramref name="game"/> of a <paramref name="channel"/>.
            </summary>
            <param name="status">Channel's title.</param>
            <param name="game">Game category to be classified as.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.SearchStreams(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            [SYNC] Execute a search query on Twitch to find a list of streams.
            </summary>
            <param name="query">A url-encoded search query.</param>
            <param name="limit">Maximum number of objects in array. Default is 25. Maximum is 100.</param>
            <param name="offset">Object offset for pagination. Default is 0.</param>
            <param name="hls">If set to true, only returns streams using HLS, if set to false only returns non-HLS streams. Default is null.</param>
            <returns>A list of Stream objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.SearchStreamsAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            [ASYNC] Execute a search query on Twitch to find a list of streams.
            </summary>
            <param name="query">A url-encoded search query.</param>
            <param name="limit">Maximum number of objects in array. Default is 25. Maximum is 100.</param>
            <param name="offset">Object offset for pagination. Default is 0.</param>
            <param name="hls">If set to true, only returns streams using HLS, if set to false only returns non-HLS streams. Default is null.</param>
            <returns>A list of Stream objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.ResetStreamKey(System.String,System.String)">
            <summary>
            [SYNC] Resets the stream key of the <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_stream</code></para>
            </summary>
            <param name="channel">The channel to reset the stream key for.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.ResetStreamKeyAsync(System.String,System.String)">
            <summary>
            [ASYNC] Resets the stream key of the <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_stream</code></para>
            </summary>
            <param name="channel">The channel to reset the stream key for.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamDelay(System.Int32,System.String,System.String)">
            <summary>
            [SYNC] Updates the <paramref name="delay"/> of a <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_editor</code></para>
            </summary>
            <param name="delay">Channel delay in seconds.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">The channel owner's access token and the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.UpdateStreamDelayAsync(System.Int32,System.String,System.String)">
            <summary>
            [ASYNC] Updates the <paramref name="delay"/> of a <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_editor</code></para>
            </summary>
            <param name="delay">Channel delay in seconds.</param>
            <param name="channel">The channel to update.</param>
            <param name="accessToken">The channel owner's access token and the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.RunCommercial(TwitchLib.Enums.CommercialLength,System.String,System.String)">
            <summary>
            [SYNC] Start a commercial on <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_commercial</code></para>
            </summary>
            <param name="length">Length of commercial break in seconds. Default value is 30. You can only trigger a commercial once every 8 minutes.</param>
            <param name="channel">The channel to start a commercial on.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.RunCommercialAsync(TwitchLib.Enums.CommercialLength,System.String,System.String)">
            <summary>
            [ASYNC] Start a commercial on <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_commercial</code></para>
            </summary>
            <param name="length">Length of commercial break in seconds. Default value is 30. You can only trigger a commercial once every 8 minutes.</param>
            <param name="channel">The channel to start a commercial on.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>The response of the request.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetChatters(System.String)">
            <summary>
            [SYNC] Retrieves a list of all people currently chatting in a channel's chat.
            </summary>
            <param name="channel">The channel to retrieve the chatting people for.</param>
            <returns>A list of Chatter objects detailing each chatter in a channel.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetChattersAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a list of all people currently chatting in a channel's chat.
            </summary>
            <param name="channel">The channel to retrieve the chatting people for.</param>
            <returns>A list of Chatter objects detailing each chatter in a channel.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.StreamIsLive(System.String)">
            <summary>
            [SYNC, DEPRECATED] Checks if a stream is live or not.
            </summary>
            <param name="channel">The channel to retrieve live status for.</param>
            <returns>Boolean representing if a stream is live or not.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.StreamIsLiveAsync(System.String)">
            <summary>
            [ASYNC, DEPRECATED] Checks if a stream is live or not.
            </summary>
            <param name="channel">The channel to retrieve live status for.</param>
            <returns>Boolean representing if a stream is live or not.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.BroadcasterOnline(System.String)">
            <summary>
            [SYNC] Retrieves the current status of the broadcaster.
            </summary>
            <param name="channel">The name of the broadcaster to check.</param>
            <returns>True if the broadcaster is online, false otherwise.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.BroadcasterOnlineAsync(System.String)">
            <summary>
            [ASYNC] Retrieves the current status of the broadcaster.
            </summary>
            <param name="channel">The name of the broadcaster to check.</param>
            <returns>True if the broadcaster is online, false otherwise.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetStreamsSummary">
            <summary>
            [SYNC] Retrieves the site wide streams summary (total viewers, total streams) on Twitch.
            </summary>
            <returns>StreamsSummary object housing total viewers, total streams.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Streams.GetStreamsSummaryAsync">
            <summary>
            [ASYNC] Retrieves the site wide streams summary (total viewers, total streams) on Twitch.
            </summary>
            <returns>StreamsSummary object housing total viewers, total streams.</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Games">
            <summary>
            Twitch API calls relating to Twitch games.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Games.GetGamesByPopularity(System.Int32,System.Int32)">
            <summary>
            [SYNC] Execute a query to return the games with the most current viewers.
            </summary>
            <param name="limit">The number of listings to return, default to 10.</param>
            <param name="offset">The number of listings to offset the returned listings, default to 0.</param>
            <returns>A list of Game objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Games.GetGamesByPopularityAsync(System.Int32,System.Int32)">
            <summary>
            [ASYNC] Execute a query to return the games with the most current viewers.
            </summary>
            <param name="limit">The number of listings to return, default to 10.</param>
            <param name="offset">The number of listings to offset the returned listings, default to 0.</param>
            <returns>A list of Game objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Games.SearchGames(System.String,System.Boolean)">
            <summary>
            [SYNC] Execute a search query on Twitch to find a list of games.
            </summary>
            <param name="query">A url-encoded search query.</param>
            <param name="live">If set to true, only games with active streams will be found.</param>
            <returns>A list of Game objects matching the query.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Games.SearchGamesAsync(System.String,System.Boolean)">
            <summary>
            [ASYNC] Execute a search query on Twitch to find a list of games.
            </summary>
            <param name="query">A url-encoded search query.</param>
            <param name="live">If set to true, only games with active streams will be found.</param>
            <returns>A list of Game objects matching the query.</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Blocks">
            <summary>
            Twitch API calls relating Twitch's blocking system.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Blocks.GetBlockedList(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            [SYNC] Retrieves a list of blocked users a specific user has.
            <para>Authenticated, required scope: <code>user_blocks_read</code></para>
            </summary>
            <param name="username">Username of user to fetch blocked list of.</param>
            <param name="accessToken">This call requires an access token.</param>
            <param name="limit">Limit output from Twitch Api. Default 25, max 100.</param>
            <param name="offset">Offset out from Twitch Api. Default 0.</param>
            <returns>List of Block objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Blocks.GetBlockedListAsync(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            [ASYNC] Retrieves a list of blocked users a specific user has.
            <para>Authenticated, required scope: <code>user_blocks_read</code></para>
            </summary>
            <param name="username">Username of user to fetch blocked list of.</param>
            <param name="accessToken">This call requires an access token.</param>
            <param name="limit">Limit output from Twitch Api. Default 25, max 100.</param>
            <param name="offset">Offset out from Twitch Api. Default 0.</param>
            <returns>List of Block objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Blocks.BlockUser(System.String,System.String,System.String)">
            <summary>
            [SYNC] Blocks a user.
            <para>Authenticated, required scope: <code>user_blocks_edit</code></para>
            </summary>
            <param name="username">User who's blocked list to add to.</param>
            <param name="blockedUsername">User to block.</param>
            <param name="accessToken">This call requires an access token.</param>
            <returns>Block object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Blocks.BlockUserAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Blocks a user.
            <para>Authenticated, required scope: <code>user_blocks_edit</code></para>
            </summary>
            <param name="username">User who's blocked list to add to.</param>
            <param name="blockedUsername">User to block.</param>
            <param name="accessToken">This call requires an access token.</param>
            <returns>Block object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Blocks.UnblockUser(System.String,System.String,System.String)">
            <summary>
            [SYNC] Unblocks a user.
            <para>Authenticated, required scope: <code>user_blocks_edit</code></para>
            </summary>
            <param name="username">User who's blocked list to unblock from.</param>
            <param name="blockedUsername">User to unblock.</param>
            <param name="accessToken">This call requires an access token.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Blocks.UnblockUserAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Unblocks a user.
            <para>Authenticated, required scope: <code>user_blocks_edit</code></para>
            </summary>
            <param name="username">User who's blocked list to unblock from.</param>
            <param name="blockedUsername">User to unblock.</param>
            <param name="accessToken">This call requires an access token.</param>
        </member>
        <member name="T:TwitchLib.TwitchApi.Follows">
            <summary>
            Twitch API calls relating to Twitch's follow system.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.UserFollowsChannel(System.String,System.String)">
            <summary>
            [SYNC] Retrieves whether a specified user is following the specified user.
            </summary>
            <param name="username">The user to check the follow status of.</param>
            <param name="channel">The channel to check against.</param>
            <returns>Returns Follow object representing follow relationship.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.UserFollowsChannelAsync(System.String,System.String)">
            <summary>
            [ASYNC] Retrieves whether a specified user is following the specified user.
            </summary>
            <param name="username">The user to check the follow status of.</param>
            <param name="channel">The channel to check against.</param>
            <returns>Returns Follow object representing follow relationship.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.GetFollowers(System.String,System.Int32,System.String,TwitchLib.Enums.SortDirection)">
            <summary>
            [SYNC] Retrieves an ascending or descending list of followers from a specific channel.
            </summary>
            <param name="channel">The channel to retrieve the followers from.</param>
            <param name="limit">Maximum number of objects in array. Default is 25. Maximum is 100.</param>
            <param name="cursor">Twitch uses cursoring to paginate long lists of followers. Check <code>_cursor</code> in response body and set <code>cursor</code> to this value to get the next page of results, or use <code>_links.next</code> to navigate to the next page of results.</param>
            <param name="direction">Creation date sorting direction.</param>
            <returns>A list of TwitchFollower objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.GetFollowersAsync(System.String,System.Int32,System.String,TwitchLib.Enums.SortDirection)">
            <summary>
            [ASYNC] Retrieves an ascending or descending list of followers from a specific channel.
            </summary>
            <param name="channel">The channel to retrieve the followers from.</param>
            <param name="limit">Maximum number of objects in array. Default is 25. Maximum is 100.</param>
            <param name="cursor">Twitch uses cursoring to paginate long lists of followers. Check <code>_cursor</code> in response body and set <code>cursor</code> to this value to get the next page of results, or use <code>_links.next</code> to navigate to the next page of results.</param>
            <param name="direction">Creation date sorting direction.</param>
            <returns>A list of TwitchFollower objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.GetFollowedUsers(System.String,System.Int32,System.Int32,TwitchLib.Enums.SortKey)">
            <summary>
            [SYNC] Retrieves a list of followed users a specific user has.
            </summary>
            <param name="channel">Channel to fetch followed users</param>
            <param name="limit">Default is 25, max is 100, min is 0</param>
            <param name="offset">Integer representing list offset</param>
            <param name="sortKey">Enum representing sort order.</param>
            <returns>FollowedUsersResponse object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.GetFollowedUsersAsync(System.String,System.Int32,System.Int32,TwitchLib.Enums.SortKey)">
            <summary>
            [ASYNC] Retrieves a list of followed users a specific user has.
            </summary>
            <param name="channel">Channel to fetch followed users</param>
            <param name="limit">Default is 25, max is 100, min is 0</param>
            <param name="offset">Integer representing list offset</param>
            <param name="sortKey">Enum representing sort order.</param>
            <returns>FollowedUsersResponse object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.FollowChannel(System.String,System.String,System.String)">
            <summary>
            [SYNC] Follows a channel given by <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>user_follows_edit</code></para>
            </summary>
            <param name="username">The username of the user trying to follow the given channel.</param>
            <param name="channel">The channel to follow.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>A follow object representing the follow action.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.FollowChannelAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Follows a channel given by <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>user_follows_edit</code></para>
            </summary>
            <param name="username">The username of the user trying to follow the given channel.</param>
            <param name="channel">The channel to follow.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>A follow object representing the follow action.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.UnfollowChannel(System.String,System.String,System.String)">
            <summary>
            [SYNC] Unfollows a channel given by <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>user_follows_edit</code></para>
            </summary>
            <param name="username">The username of the user trying to follow the given channel.</param>
            <param name="channel">The channel to unfollow.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Follows.UnfollowChannelAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Unfollows a channel given by <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>user_follows_edit</code></para>
            </summary>
            <param name="username">The username of the user trying to follow the given channel.</param>
            <param name="channel">The channel to unfollow.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
        </member>
        <member name="T:TwitchLib.TwitchApi.Subscriptions">
            <summary>
            Twitch API calls relating to Twitch subscriptions.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.GetSubscriberCount(System.String,System.String)">
            <summary>
            [SYNC] Returns the amount of subscribers <paramref name="channel"/> has.
            <para>Authenticated, required scope: <code>channel_subscriptions</code></para>
            </summary>
            <param name="channel">The channel to retrieve the subscriptions from.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>An integer of the total subscription count.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.GetSubscriberCountAsync(System.String,System.String)">
            <summary>
            [ASYNC] Returns the amount of subscribers <paramref name="channel"/> has.
            <para>Authenticated, required scope: <code>channel_subscriptions</code></para>
            </summary>
            <param name="channel">The channel to retrieve the subscriptions from.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>An integer of the total subscription count.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.ChannelHasUserSubscribed(System.String,System.String,System.String)">
            <summary>
            [SYNC] Retrieves whether a <paramref name="username"/> is subscribed to a <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_check_subscription</code></para>
            </summary>
            <param name="username">The user to check subscription status for.</param>
            <param name="channel">The channel to check against.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>True if the user is subscribed to the channel, false otherwise.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.ChannelHasUserSubscribedAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Retrieves whether a <paramref name="username"/> is subscribed to a <paramref name="channel"/>.
            <para>Authenticated, required scope: <code>channel_check_subscription</code></para>
            </summary>
            <param name="username">The user to check subscription status for.</param>
            <param name="channel">The channel to check against.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>True if the user is subscribed to the channel, false otherwise.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.GetChannelSubscribers(System.String,System.String)">
            <summary>
            [SYNC] Retrieves subscriber list for a <paramref name="channel"/>.
            <para>Authenticated, required scope: channel_subscriptions</para>
            </summary>
            <param name="channel">The channel to check against.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>List of channel subscribers</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.GetChannelSubscribersAsync(System.String,System.String)">
            <summary>
            [ASYNC] Retrieves subscriber list for a <paramref name="channel"/>.
            <para>Authenticated, required scope: channel_subscriptions</para>
            </summary>
            <param name="channel">The channel to check against.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>List of channel subscribers</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.GetSubscribers(System.String,System.Int32,System.Int32,TwitchLib.Enums.SortDirection,System.String)">
            <summary>
            [SYNC] Retrieves channel subscribers from Twitch using limit and offset
            </summary>
            <param name="channel">Channel to pull subscribers from</param>
            <param name="limit">Limit the number of subscriptions returned. Max 100, default: 25</param>
            <param name="offset">Access the subscriber list at a specific offset. Default 0</param>
            <param name="direction">Direction of which the subscribers should be returned. Default Ascending</param>
            <param name="accessToken">Optional access token used if you haven't set the access token.</param>
            <returns>SubscribersResponse housing all subscribers and total number</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Subscriptions.GetSubscribersAsync(System.String,System.Int32,System.Int32,TwitchLib.Enums.SortDirection,System.String)">
            <summary>
            [ASYNC] Retrieves channel subscribers from Twitch using limit and offset
            </summary>
            <param name="channel">Channel to pull subscribers from</param>
            <param name="limit">Limit the number of subscriptions returned. Max 100, default: 25</param>
            <param name="offset">Access the subscriber list at a specific offset. Default 0</param>
            <param name="direction">Direction of which the subscribers should be returned. Default Ascending</param>
            <param name="accessToken">Optional access token used if you haven't set the access token.</param>
            <returns>SubscribersResponse housing all subscribers and total number</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Videos">
            <summary>
            Twitch API calls relating to Twitch videos.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Videos.GetChannelVideos(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            [SYNC] Returns a list of videos ordered by time of creation, starting with the most recent.
            </summary>
            <param name="channel">The channel to retrieve the list of videos from.</param>
            <param name="limit">Maximum number of objects in array. Default is 10. Maximum is 100.</param>
            <param name="offset">Object offset for pagination. Default is 0.</param>
            <param name="onlyBroadcasts">Returns only broadcasts when true. Otherwise only highlights are returned. Default is false.</param>
            <param name="onlyHls">Returns only HLS VoDs when true. Otherwise only non-HLS VoDs are returned. Default is false.</param>
            <returns>A list of TwitchVideo objects the channel has available.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Videos.GetChannelVideosAsync(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            [ASYNC] Returns a list of videos ordered by time of creation, starting with the most recent.
            </summary>
            <param name="channel">The channel to retrieve the list of videos from.</param>
            <param name="limit">Maximum number of objects in array. Default is 10. Maximum is 100.</param>
            <param name="offset">Object offset for pagination. Default is 0.</param>
            <param name="onlyBroadcasts">Returns only broadcasts when true. Otherwise only highlights are returned. Default is false.</param>
            <param name="onlyHls">Returns only HLS VoDs when true. Otherwise only non-HLS VoDs are returned. Default is false.</param>
            <returns>A list of TwitchVideo objects the channel has available.</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Clips">
            <summary>
            Twitch API calls relating to Twitch clips system.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Clips.GetTopClips(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32,System.String,TwitchLib.Enums.Period,System.Boolean)">
            <summary>
            [SYNC] Retrieves a list of top clips given specific (or no) parameters.
            </summary>
            <param name="channels">List of channels to get top clips from. Limit is 10.</param>
            <param name="games">List of games to get top clips from. Limit is 10.</param>
            <param name="limit">Number of clip objects to return, limit is 100. Default is 10.</param>
            <param name="cursor">Cursor used to index through all clips.</param>
            <param name="period">Period enum used to specify a date range. Default is Day.</param>
            <param name="trending">Only pull from trending clips? Default is false.</param>
            <returns>ClipsResponse object containing cursor string as well as List of Clip objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Clips.GetTopClipsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32,System.String,TwitchLib.Enums.Period,System.Boolean)">
            <summary>
            [ASYNC] Retrieves a list of top clips given specific (or no) parameters.
            </summary>
            <param name="channels">List of channels to get top clips from. Limit is 10.</param>
            <param name="games">List of games to get top clips from. Limit is 10.</param>
            <param name="limit">Number of clip objects to return, limit is 100. Default is 10.</param>
            <param name="cursor">Cursor used to index through all clips.</param>
            <param name="period">Period enum used to specify a date range. Default is Day.</param>
            <param name="trending">Only pull from trending clips? Default is false.</param>
            <returns>ClipsResponse object containing cursor string as well as List of Clip objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Clips.GetClipInformation(System.String,System.String)">
            <summary>
            [SYNC] Retrieves detailed information regarding a specific clip.
            </summary>
            <param name="channel">The channel that the clip happened in.</param>
            <param name="slug">The string of words that identifies the clip.</param>
            <returns>Clip object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Clips.GetClipInformationAsync(System.String,System.String)">
            <summary>
            [ASYNC] Retrieves detailed information regarding a specific clip.
            </summary>
            <param name="channel">The channel that the clip happened in.</param>
            <param name="slug">The string of words that identifies the clip.</param>
            <returns>Clip object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Clips.GetFollowedClips(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            [SYNC] Gets the top Clips for a user's followed games. Required scope: user_read
            </summary>
            <param name="cursor">Cursor used to index through all clips.</param>
            <param name="limit">Number of clip objects to return, limit is 100. Default is 10</param>
            <param name="trending">Only pull from trending clips? Default is false.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>ClipsResponse object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Clips.GetFollowedClipsAsync(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            [ASYNC] Gets the top Clips for a user's followed games. Required scope: user_read
            </summary>
            <param name="cursor">Cursor used to index through all clips.</param>
            <param name="limit">Number of clip objects to return, limit is 100. Default is 10</param>
            <param name="trending">Only pull from trending clips? Default is false.</param>
            <param name="accessToken">An oauth token with the required scope.</param>
            <returns>ClipsResponse object.</returns>
        </member>
        <member name="T:TwitchLib.TwitchApi.Communities">
            <summary>
            Twitch API calls relating to Twitch communities.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityByName(System.String)">
            <summary>
            [SYNC] Retrieves a community object representing a Twitch community by the name.
            </summary>
            <param name="communityName">Name of the community to fetch.</param>
            <returns>Community object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityByNameAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a community object representing a Twitch community by the name.
            </summary>
            <param name="communityName">Name of the community to fetch.</param>
            <returns>Community object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityById(System.String)">
            <summary>
            [SYNC] Retrieves a community object representing a Twitch community by the id.
            </summary>
            <param name="communityId">Id of Twitch community to fetch.</param>
            <returns>Community object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityByIdAsync(System.String)">
            <summary>
            [ASYNC] Retrieves a community object representing a Twitch community by the id.
            </summary>
            <param name="communityId">Id of Twitch community to fetch.</param>
            <returns>Community object.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunity(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            [SYNC] Sends request to create a Twitch Community.
            </summary>
            <param name="name">Name of the Twitch Community. 3-25 characters. No spaces.</param>
            <param name="summary">Summary of the Twitch Community. 160 characters max.</param>
            <param name="description">Description of the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="rules">Rules for the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="accessToken">If an access token is not set, set this param.</param>
            <returns>String ID of the new community.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            [ASYNC] Sends request to create a Twitch Community.
            </summary>
            <param name="name">Name of the Twitch Community. 3-25 characters. No spaces.</param>
            <param name="summary">Summary of the Twitch Community. 160 characters max.</param>
            <param name="description">Description of the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="rules">Rules for the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="accessToken">If an access token is not set, set this param.</param>
            <returns>String ID of the new community.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.UpdateCommunity(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            [SYNC] Attempts to update details regarding an existing Twitch community.
            </summary>
            <param name="communityId">Unique Twitch community identifier.</param>
            <param name="summary">Summary of the Twitch Community. 160 characters max.</param>
            <param name="description">Description of the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="rules">Rules for the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="email">Contact email for the community.</param>
            <param name="accessToken">If an access token is not set, set this param.</param>
            <returns>String ID of the new community.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.UpdateCommunityAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            [ASYNC] Attempts to update details regarding an existing Twitch community.
            </summary>
            <param name="communityId">Unique Twitch community identifier.</param>
            <param name="summary">Summary of the Twitch Community. 160 characters max.</param>
            <param name="description">Description of the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="rules">Rules for the Twitch Community. Max of 1,572,864 characters.</param>
            <param name="email">Contact email for the community.</param>
            <param name="accessToken">If an access token is not set, set this param.</param>
            <returns>String ID of the new community.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetTopCommunities(System.Nullable{System.Int64},System.String)">
            <summary>
            [SYNC] Fetches the top communities on Twitch currently by viewer count.
            </summary>
            <param name="limit">Limit the number of results. Maximum possible is 100.</param>
            <param name="cursor">Used to tell server where to start fetching results.</param>
            <returns>TopCommunitiesResponse housing total, cursor, and list of communities.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetTopCommunitiesAsync(System.Nullable{System.Int64},System.String)">
            <summary>
            [ASYNC] Fetches the top communities on Twitch currently by viewer count.
            </summary>
            <param name="limit">Limit the number of results. Maximum possible is 100.</param>
            <param name="cursor">Used to tell server where to start fetching results.</param>
            <returns>TopCommunitiesResponse housing total, cursor, and list of communities.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityBannedUsers(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            [SYNC] Fetches the banned users in a specific community.
            </summary>
            <param name="communityId">Unique ID of the Twitch community.</param>
            <param name="limit">Limit the number of results. Maximum possible is 100.</param>
            <param name="cursor">Used to tell server where to start fetching results.</param>
            <param name="accessToken">If not set, you must set this param.</param>
            <returns>CommunityBannedUsersResponse housing cursor and banned users.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityBannedUsersAsync(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            [ASYNC] Fetches the banned users in a specific community.
            </summary>
            <param name="communityId">Unique ID of the Twitch community.</param>
            <param name="limit">Limit the number of results. Maximum possible is 100.</param>
            <param name="cursor">Used to tell server where to start fetching results.</param>
            <param name="accessToken">If not set, you must set this param.</param>
            <returns>CommunityBannedUsersResponse housing cursor and banned users.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetStreamersInCommunity(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            [SYNC] Gets all streams currently in a community.
            </summary>
            <param name="communityId">Unique ID of the Twitch community.</param>
            <param name="limit">Limit the number of results. Maximum possible is 100.</param>
            <param name="cursor">Used to tell server where to start fetching results.</param>
            <returns>StreamsInCommunityResponse houses total streams and list of streams.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetStreamersInCommunityAsync(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            [ASYNC] Gets all streams currently in a community.
            </summary>
            <param name="communityId">Unique ID of the Twitch community.</param>
            <param name="limit">Limit the number of results. Maximum possible is 100.</param>
            <param name="cursor">Used to tell server where to start fetching results.</param>
            <returns>StreamsInCommunityResponse houses total streams and list of streams.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.BanCommunityMember(System.String,System.String,System.String)">
            <summary>
            [SYNC] Sends request to ban a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user banned from.</param>
            <param name="userId">The ID of the user to be banned.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.BanCommunityMemberAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Sends request to ban a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user banned from.</param>
            <param name="userId">The ID of the user to be banned.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.UnBanCommunityMember(System.String,System.String,System.String)">
            <summary>
            [SYNC] Sends request to unban a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user unbanned from.</param>
            <param name="userId">The ID of the user to be unbanned.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.UnBanCommunityMemberAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Sends request to unban a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user unbanned from.</param>
            <param name="userId">The ID of the user to be unbanned.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.TimeoutCommunityMember(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            [SYNC] Sends request to timeout a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user timedout from.</param>
            <param name="userId">The ID of the user to be timedout.</param>
            <param name="durationInHours">THe number of hours the member will be timed out for.</param>
            <param name="reason">Optional parameter to provide a reason why they were timed out.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.TimeoutCommunityMemberAsync(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            [ASYNC] Sends request to timeout a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user timedout from.</param>
            <param name="userId">The ID of the user to be timedout.</param>
            <param name="durationInHours">THe number of hours the member will be timed out for.</param>
            <param name="reason">Optional parameter to provide a reason why they were timed out.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.UnTimeoutCommunityMember(System.String,System.String,System.String)">
            <summary>
            [SYNC] Sends request to untimeout a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user untimedout from.</param>
            <param name="userId">The ID of the user to be untimedout.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.UnTimeoutCommunityMemberAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Sends request to untimeout a member in a Twitch community.
            </summary>
            <param name="communityId">The ID of the community that will have the user untimedout from.</param>
            <param name="userId">The ID of the user to be untimedout.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityModerators(System.String)">
            <summary>
            [SYNC] Fetches the moderators that exist in a specific Twitch community.
            </summary>
            <param name="communityId">The ID of the community to fetch moderators from.</param>
            <returns>List of CommunityModerator objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.GetCommunityModeratorsAsync(System.String)">
            <summary>
            [ASYNC] Fetches the moderators that exist in a specific Twitch community.
            </summary>
            <param name="communityId">The ID of the community to fetch moderators from.</param>
            <returns>List of CommunityModerator objects.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.AddCommunityModerator(System.String,System.String,System.String)">
            <summary>
            [SYNC] Adds a new moderator to a specific community
            </summary>
            <param name="communityId">The ID of the community to fetch moderators from.</param>
            <param name="userId">The ID of the new moderator.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.AddCommunityModeratorAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Adds a new moderator to a specific community
            </summary>
            <param name="communityId">The ID of the community to add the moderator to.</param>
            <param name="userId">The ID of the new moderator.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.RemoveCommunityModerator(System.String,System.String,System.String)">
            <summary>
            [SYNC] Removes an existing moderator from a specific community
            </summary>
            <param name="communityId">The ID of the community to fetch moderators from.</param>
            <param name="userId">The ID of the moderator to remove..</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.RemoveCommunityModeratorAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Removes an existing moderator from a specific community
            </summary>
            <param name="communityId">The ID of the community to fetch moderators from.</param>
            <param name="userId">The ID of the moderator to remove..</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityAvatarImage(System.String,System.String,System.String)">
            <summary>
            [SYNC] Attempts to create an avatar image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="base64AvatarImage">Base64 encoded image as a string</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityAvatarImage(System.String,System.Drawing.Image,System.String)">
            <summary>
            [SYNC] Attempts to create an avatar image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="avatarImage">Image object representing the avatar image.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityAvatarImageAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Attempts to create an avatar image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="base64AvatarImage">Base64 encoded image as a string</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityAvatarImageAsync(System.String,System.Drawing.Image,System.String)">
            <summary>
            [ASYNC] Attempts to create an avatar image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="avatarImage">Image object representing the avatar image.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.RemoveCommunityAvatarImage(System.String,System.String)">
            <summary>
            [SYNC] Attempts to remove a community avatar image.
            </summary>
            <param name="communityId">The ID of the community to remove the avatar image from.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.RemoveCommunityAvatarImageAsync(System.String,System.String)">
            <summary>
            [ASYNC] Attempts to remove a community avatar image.
            </summary>
            <param name="communityId">The ID of the community to remove the avatar image from.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityCoverImage(System.String,System.String,System.String)">
            <summary>
            [SYNC] Attempts to create an Cover image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="base64CoverImage">Base64 encoded image as a string</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityCoverImage(System.String,System.Drawing.Image,System.String)">
            <summary>
            [SYNC] Attempts to create an Cover image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="CoverImage">Image object representing the Cover image.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityCoverImageAsync(System.String,System.String,System.String)">
            <summary>
            [ASYNC] Attempts to create an Cover image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="base64CoverImage">Base64 encoded image as a string</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.CreateCommunityCoverImageAsync(System.String,System.Drawing.Image,System.String)">
            <summary>
            [ASYNC] Attempts to create an Cover image for a community.
            </summary>
            <param name="communityId">The ID of the community to assign the image to.</param>
            <param name="CoverImage">Image object representing the Cover image.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.RemoveCommunityCoverImage(System.String,System.String)">
            <summary>
            [SYNC] Attempts to remove a community Cover image.
            </summary>
            <param name="communityId">The ID of the community to remove the Cover image from.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.Communities.RemoveCommunityCoverImageAsync(System.String,System.String)">
            <summary>
            [ASYNC] Attempts to remove a community Cover image.
            </summary>
            <param name="communityId">The ID of the community to remove the Cover image from.</param>
            <param name="accessToken">If access token was not previously set, you must set it here.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.SetClientId(System.String,System.Boolean)">
            <summary>
            [SYNC] Sets ClientId, which is required for all API calls. Also validates ClientId.
            <param name="clientId">Client-Id to bind to TwitchApi.</param>
            <param name="disableClientIdValidation">Forcefully disables Client-Id validation.</param>
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.SetClientIdAsync(System.String,System.Boolean)">
            <summary>
            [ASYNC] Sets ClientId, which is required for all API calls. Also validates ClientId.
            <param name="clientId">Client-Id to bind to TwitchApi.</param>
            <param name="disableClientIdValidation">Forcefully disables Client-Id validation.</param>
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchApi.SetAccessToken(System.String)">
            <summary>
            [SYNC] Sets Access Token, which is saved in memory. This is not necessary, as tokens can be passed into Api calls.
            </summary>
            <param name="accessToken">Twitch account OAuth token to store in memory.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.SetAccessTokenAsync(System.String)">
            <summary>
            [ASYNC] Sets Access Token, which is saved in memory. This is not necessary, as tokens can be passed into Api calls.
            </summary>
            <param name="accessToken">Twitch account OAuth token to store in memory.</param>
        </member>
        <member name="M:TwitchLib.TwitchApi.ValidClientId(System.String,System.Boolean)">
            <summary>
            [SYNC] Validates a Client-Id and optionally updates it.
            </summary>
            <param name="clientId">Client-Id string to be validated.</param>
            <param name="updateClientIdOnSuccess">Updates Client-Id if passed Client-Id is valid.</param>
            <returns>True or false depending on the validity of the Client-Id.</returns>
        </member>
        <member name="M:TwitchLib.TwitchApi.ValidClientIdAsync(System.String,System.Boolean)">
            <summary>
            [ASYNC] Validates a Client-Id and optionally updates it.
            </summary>
            <param name="clientId">Client-Id string to be validated.</param>
            <param name="updateClientIdOnSuccess">Updates Client-Id if passed Client-Id is valid.</param>
            <returns>True or false depending on the validity of the Client-Id.</returns>
        </member>
        <member name="T:TwitchLib.TwitchClient">
            <summary>Represents a client connected to a Twitch channel.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.JoinedChannels">
            <summary>A list of all channels the client is currently in.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.TwitchUsername">
            <summary>Username of the user connected via this library.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.PreviousWhisper">
            <summary>The most recent whisper received.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.IsConnected">
            <summary>The current connection status of the client.</summary>
        </member>
        <member name="F:TwitchLib.TwitchClient.ChatThrottler">
            <summary>Assign this property a valid MessageThrottler to apply message throttling on chat messages.</summary>
        </member>
        <member name="F:TwitchLib.TwitchClient.WhisperThrottler">
            <summary>Assign this property a valid MessageThrottler to apply message throttling on whispers.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.ChannelEmotes">
            <summary>The emotes this channel replaces.</summary>
            <remarks>
                Twitch-handled emotes are automatically added to this collection (which also accounts for
                managing user emote permissions such as sub-only emotes). Third-party emotes will have to be manually
                added according to the availability rules defined by the third-party.
            </remarks>
        </member>
        <member name="P:TwitchLib.TwitchClient.DisableAutoPong">
            <summary>Will disable the client from sending automatic PONG responses to PING</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.WillReplaceEmotes">
            <summary>Determines whether Emotes will be replaced in messages.</summary>
        </member>
        <member name="P:TwitchLib.TwitchClient.OverrideBeingHostedCheck">
            <summary>If set to true, the library will not check upon channel join that if BeingHosted event is subscribed, that the bot is connected as broadcaster. Only override if the broadcaster is joining multiple channels, including the broadcaster's.</summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnConnected">
            <summary>
            Fires when client connects to Twitch.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnJoinedChannel">
            <summary>
            Fires when client joins a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnIncorrectLogin">
            <summary>
            Fires on logging in with incorrect details, returns ErrorLoggingInException.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChannelStateChanged">
            <summary>
            Fires when connecting and channel state is changed, returns ChannelState.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserStateChanged">
            <summary>
            Fires when a user state is received, returns UserState.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnMessageReceived">
            <summary>
            Fires when a new chat message arrives, returns ChatMessage.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnWhisperReceived">
            <summary>
            Fires when a new whisper arrives, returns WhisperMessage.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnMessageSent">
            <summary>
            Fires when a chat message is sent, returns username, channel and message.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnWhisperSent">
            <summary>
            Fires when a whisper message is sent, returns username and message.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChatCommandReceived">
            <summary>
            Fires when command (uses custom chat command identifier) is received, returns channel, command, ChatMessage, arguments as string, arguments as list.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnWhisperCommandReceived">
            <summary>
            Fires when command (uses custom whisper command identifier) is received, returns command, Whispermessage.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserJoined">
            <summary>
            Fires when a new viewer/chatter joined the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnModeratorJoined">
            <summary>
            Fires when a moderator joined the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnModeratorLeft">
            <summary>
            Fires when a moderator joins the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnNewSubscriber">
            <summary>
            Fires when new subscriber is announced in chat, returns Subscriber.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnReSubscriber">
            <summary>
            Fires when current subscriber renews subscription, returns ReSubscriber.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnHostLeft">
            <summary>
            Fires when a hosted streamer goes offline and hosting is killed.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnExistingUsersDetected">
            <summary>
            Fires when Twitch notifies client of existing users in chat.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserLeft">
            <summary>
            Fires when a PART message is received from Twitch regarding a particular viewer
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnHostingStarted">
            <summary>
            Fires when the joined channel begins hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnHostingStopped">
            <summary>
            Fires when the joined channel quits hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnDisconnected">
            <summary>
            Fires when bot has disconnected.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnConnectionError">
            <summary>
            Forces when bot suffers conneciton error.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChatCleared">
            <summary>
            Fires when a channel's chat is cleared.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserTimedout">
            <summary>
            Fires when a viewer gets timedout by any moderator.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnLeftChannel">
            <summary>
            Fires when client successfully leaves a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnUserBanned">
            <summary>
            Fires when a viewer gets banned by any moderator.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnModeratorsReceived">
            <summary>
            Fires when a list of moderators is received.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnChatColorChanged">
            <summary>
            Fires when confirmation of a chat color change request was received.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnSendReceiveData">
            <summary>
            Fires when data is either received or sent.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnNowHosting">
            <summary>
            Fires when client receives notice that a joined channel is hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.TwitchClient.OnBeingHosted">
            <summary>
            Fires when the library detects another channel has started hosting the broadcaster's stream. MUST BE CONNECTED AS BROADCASTER.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.#ctor(TwitchLib.Models.Client.ConnectionCredentials,System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Initializes the TwitchChatClient class.
            </summary>
            <param name="channel">The channel to connect to.</param>
            <param name="credentials">The credentials to use to log in.</param>
            <param name="chatCommandIdentifier">The identifier to be used for reading and writing commands from chat.</param>
            <param name="whisperCommandIdentifier">The identifier to be used for reading and writing commands from whispers.</param>
            <param name="logging">Whether or not logging to console should be enabled.</param>
            <param name="autoReListenOnExceptions">By default, TwitchClient will silence exceptions and auto-relisten for overall stability. For debugging, you may wish to have the exception bubble up, set this to false.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SetLoggingStatus(System.Boolean)">
            <summary>
            Depending in the parameter, either enables or disables logging to the debug console.
            </summary>
            <param name="loggingStatus">True to enable logging, false to disable logging.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendRaw(System.String)">
            <summary>
            Sends a RAW IRC message.
            </summary>
            <param name="message">The RAW message to be sent.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendMessage(TwitchLib.Models.Client.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Sends a formatted Twitch channel chat message.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="dryRun">If set to true, the message will not actually be sent for testing purposes.</param>
            <param name="channel">Channel to send message to.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendMessage(System.String,System.String,System.Boolean)">
            <summary>
            SendMessage wrapper that accepts channel in string form.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendMessage(System.String,System.Boolean)">
            <summary>
            SendMessage wrapper that sends message to first joined channel.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.SendWhisper(System.String,System.String,System.Boolean)">
            <summary>
            Sends a formatted whisper message to someone.
            </summary>
            <param name="receiver">The receiver of the whisper.</param>
            <param name="message">The message to be sent.</param>
            <param name="dryRun">If set to true, the message will not actually be sent for testing purposes.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.Connect">
            <summary>
            Start connecting to the Twitch IRC chat.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.Disconnect">
            <summary>
            Start disconnecting from the Twitch IRC chat.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.Reconnect">
            <summary>
            Reconnects to Twitch channel given existing login credentials
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.AddChatCommandIdentifier(System.Char)">
            <summary>
            Adds a character to a list of characters that if found at the start of a message, fires command received event.
            </summary>
            <param name="identifier">Character, that if found at start of message, fires command received event.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.RemoveChatCommandIdentifier(System.Char)">
            <summary>
            Removes a character from a list of characters that if found at the start of a message, fires command received event.
            </summary>
            <param name="identifier">Command identifier to removed from identifier list.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.AddWhisperCommandIdentifier(System.Char)">
            <summary>
            Adds a character to a list of characters that if found at the start of a whisper, fires command received event.
            </summary>
            <param name="identifier">Character, that if found at start of message, fires command received event.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.RemoveWhisperCommandIdentifier(System.Char)">
            <summary>
            Removes a character to a list of characters that if found at the start of a whisper, fires command received event.
            </summary>
            <param name="identifier">Command identifier to removed from identifier list.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.JoinChannel(System.String,System.Boolean)">
            <summary>
            Join the Twitch IRC chat of <paramref name="channel"/>.
            </summary>
            <param name="channel">The channel to join.</param>
            <param name="overrideCheck">Override a join check.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetJoinedChannel(System.String)">
            <summary>
            Returns a JoinedChannel object using a passed string/>.
            </summary>
            <param name="channel">String channel to search for.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.LeaveChannel(System.String)">
            <summary>
            Leaves (PART) the Twitch IRC chat of <paramref name="channel"/>.
            </summary>
            <param name="channel">The channel to leave.</param>
            <returns>True is returned if the passed channel was found, false if channel not found.</returns>
        </member>
        <member name="M:TwitchLib.TwitchClient.LeaveChannel(TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Leaves (PART) the Twitch IRC chat of <paramref name="channel"/>.
            </summary>
            <param name="channel">The JoinedChannel object to leave.</param>
            <returns>True is returned if the passed channel was found, false if channel not found.</returns>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetChannelModerators(TwitchLib.Models.Client.JoinedChannel)">
            <summary>
            Sends a request to get channel moderators. You MUST listen to OnModeratorsReceived event./>.
            </summary>
            <param name="channel">JoinedChannel object to designate which channel to send request to.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetChannelModerators(System.String)">
            <summary>
            Sends a request to get channel moderators. You MUST listen to OnModeratorsReceived event./>.
            </summary>
            <param name="channel">String representing channel to designate which channel to send request to.</param>
        </member>
        <member name="M:TwitchLib.TwitchClient.GetChannelModerators">
            <summary>
            Sends a request to get channel moderators. Request sent to first joined channel. You MUST listen to OnModeratorsReceived event./>.
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchClient.OnReadLineTest(System.String)">
            <summary>
            This method allows firing the message parser with a custom irc string allowing for easy testing
            </summary>
            <param name="rawIrc">This should be a raw IRC message resembling one received from Twitch IRC.</param>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnPubSubServiceConnected">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnPubSubServiceError">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnPubSubServiceClosed">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnListenResponse">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnTimeout">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnBan">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnUnban">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnUntimeout">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnHost">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnSubscribersOnly">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnSubscribersOnlyOff">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnClear">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnEmoteOnly">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnEmoteOnlyOff">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnR9kBeta">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnR9kBetaOff">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnBitsReceived">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnStreamUp">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnStreamDown">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnViewCount">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="F:TwitchLib.TwitchPubSub.OnWhisper">
            <summary>EventHandler for named event.</summary>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.#ctor(System.Boolean)">
            <summary>
            Constructor for a client that interface's with Twitch's new PubSub system.
            </summary>
            <param name="_logging">Set this true to have raw messages from PubSub system printed to console.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToChatModeratorActions(System.Int32,System.Int32,System.String)">
            <summary>
            Sends a request to listenOn timeouts and bans in a specific channel
            </summary>
            <param name="myTwitchId">A moderator's twitch acount's ID (can be fetched from TwitchApi)</param>
            <param name="channelTwitchId">Channel ID who has previous parameter's moderator (can be fetched from TwitchApi)</param>
            <param name="moderatorOAuth">Moderator OAuth key (can be OAuth key with any scope)</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToBitsEvents(System.Int32,System.String)">
            <summary>
            Sends request to listenOn bits events in specific channel
            </summary>
            <param name="channelTwitchId">Channel Id of channel to listen to bitsOn (can be fetched from TwitchApi)</param>
            <param name="channelOAuth">OAuth token linked to the channel.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToVideoPlayback(System.Int32)">
            <summary>
            Sends request to listenOn video playback events in specific channel
            </summary>
            <param name="channelTwitchId">Channel Id of channel to listen to playback events in.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.ListenToWhispers(System.Int32,System.String)">
            <summary>
            Sends request to listen to whispers from specific channel.
            </summary>
            <param name="channelTwitchId">Channel to listen to whispers on.</param>
            <param name="channelOAuth">OAuth token to verify identity.</param>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.Connect">
            <summary>
            Method to connect to Twitch's PubSub service. You MUST listen toOnConnected event and listen to a Topic within 15 seconds of connecting (or be disconnected)
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.Disconnect">
            <summary>
            What do you think it does? :)
            </summary>
        </member>
        <member name="M:TwitchLib.TwitchPubSub.TestMessageParser(System.String)">
            <summary>
            This method will send passed json text to the message parser in order to allow forOn-demand parser testing.
            </summary>
            <param name="testJsonString"></param>
        </member>
    </members>
</doc>
